var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// node_modules/base64-js/index.js
var require_base64_js = __commonJS({
  "node_modules/base64-js/index.js"(exports) {
    "use strict";
    exports.byteLength = byteLength;
    exports.toByteArray = toByteArray;
    exports.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (i2 = 0, len = code.length; i2 < len; ++i2) {
      lookup[i2] = code[i2];
      revLookup[code.charCodeAt(i2)] = i2;
    }
    var i2;
    var len;
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len2 = b64.length;
      if (len2 % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }
      var validLen = b64.indexOf("=");
      if (validLen === -1) validLen = len2;
      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i3;
      for (i3 = 0; i3 < len2; i3 += 4) {
        tmp = revLookup[b64.charCodeAt(i3)] << 18 | revLookup[b64.charCodeAt(i3 + 1)] << 12 | revLookup[b64.charCodeAt(i3 + 2)] << 6 | revLookup[b64.charCodeAt(i3 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i3)] << 2 | revLookup[b64.charCodeAt(i3 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i3)] << 10 | revLookup[b64.charCodeAt(i3 + 1)] << 4 | revLookup[b64.charCodeAt(i3 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i3 = start; i3 < end; i3 += 3) {
        tmp = (uint8[i3] << 16 & 16711680) + (uint8[i3 + 1] << 8 & 65280) + (uint8[i3 + 2] & 255);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len2 = uint8.length;
      var extraBytes = len2 % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i3 = 0, len22 = len2 - extraBytes; i3 < len22; i3 += maxChunkLength) {
        parts.push(encodeChunk(uint8, i3, i3 + maxChunkLength > len22 ? len22 : i3 + maxChunkLength));
      }
      if (extraBytes === 1) {
        tmp = uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
        );
      }
      return parts.join("");
    }
  }
});

// node_modules/ieee754/index.js
var require_ieee754 = __commonJS({
  "node_modules/ieee754/index.js"(exports) {
    exports.read = function(buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i2 = isLE ? nBytes - 1 : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i2];
      i2 += d;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset + i2], i2 += d, nBits -= 8) {
      }
      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer[offset + i2], i2 += d, nBits -= 8) {
      }
      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : (s ? -1 : 1) * Infinity;
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    };
    exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i2 = isLE ? 0 : nBytes - 1;
      var d = isLE ? 1 : -1;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);
      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }
        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }
      for (; mLen >= 8; buffer[offset + i2] = m & 255, i2 += d, m /= 256, mLen -= 8) {
      }
      e = e << mLen | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i2] = e & 255, i2 += d, e /= 256, eLen -= 8) {
      }
      buffer[offset + i2 - d] |= s * 128;
    };
  }
});

// node_modules/buffer/index.js
var require_buffer = __commonJS({
  "node_modules/buffer/index.js"(exports) {
    "use strict";
    var base64 = require_base64_js();
    var ieee754 = require_ieee754();
    var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
    exports.Buffer = Buffer2;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;
    var K_MAX_LENGTH = 2147483647;
    exports.kMaxLength = K_MAX_LENGTH;
    Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
    if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
      console.error(
        "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
      );
    }
    function typedArraySupport() {
      try {
        const arr = new Uint8Array(1);
        const proto = { foo: function() {
          return 42;
        } };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
      } catch (e) {
        return false;
      }
    }
    Object.defineProperty(Buffer2.prototype, "parent", {
      enumerable: true,
      get: function() {
        if (!Buffer2.isBuffer(this)) return void 0;
        return this.buffer;
      }
    });
    Object.defineProperty(Buffer2.prototype, "offset", {
      enumerable: true,
      get: function() {
        if (!Buffer2.isBuffer(this)) return void 0;
        return this.byteOffset;
      }
    });
    function createBuffer(length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"');
      }
      const buf = new Uint8Array(length);
      Object.setPrototypeOf(buf, Buffer2.prototype);
      return buf;
    }
    function Buffer2(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") {
          throw new TypeError(
            'The "string" argument must be of type string. Received type number'
          );
        }
        return allocUnsafe(arg);
      }
      return from(arg, encodingOrOffset, length);
    }
    Buffer2.poolSize = 8192;
    function from(value, encodingOrOffset, length) {
      if (typeof value === "string") {
        return fromString(value, encodingOrOffset);
      }
      if (ArrayBuffer.isView(value)) {
        return fromArrayView(value);
      }
      if (value == null) {
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof value === "number") {
        throw new TypeError(
          'The "value" argument must not be of type number. Received type number'
        );
      }
      const valueOf = value.valueOf && value.valueOf();
      if (valueOf != null && valueOf !== value) {
        return Buffer2.from(valueOf, encodingOrOffset, length);
      }
      const b = fromObject(value);
      if (b) return b;
      if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
        return Buffer2.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
      }
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
      );
    }
    Buffer2.from = function(value, encodingOrOffset, length) {
      return from(value, encodingOrOffset, length);
    };
    Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer2, Uint8Array);
    function assertSize(size) {
      if (typeof size !== "number") {
        throw new TypeError('"size" argument must be of type number');
      } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
      }
    }
    function alloc(size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(size);
      }
      if (fill !== void 0) {
        return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
      }
      return createBuffer(size);
    }
    Buffer2.alloc = function(size, fill, encoding) {
      return alloc(size, fill, encoding);
    };
    function allocUnsafe(size) {
      assertSize(size);
      return createBuffer(size < 0 ? 0 : checked(size) | 0);
    }
    Buffer2.allocUnsafe = function(size) {
      return allocUnsafe(size);
    };
    Buffer2.allocUnsafeSlow = function(size) {
      return allocUnsafe(size);
    };
    function fromString(string, encoding) {
      if (typeof encoding !== "string" || encoding === "") {
        encoding = "utf8";
      }
      if (!Buffer2.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      const length = byteLength(string, encoding) | 0;
      let buf = createBuffer(length);
      const actual = buf.write(string, encoding);
      if (actual !== length) {
        buf = buf.slice(0, actual);
      }
      return buf;
    }
    function fromArrayLike(array) {
      const length = array.length < 0 ? 0 : checked(array.length) | 0;
      const buf = createBuffer(length);
      for (let i2 = 0; i2 < length; i2 += 1) {
        buf[i2] = array[i2] & 255;
      }
      return buf;
    }
    function fromArrayView(arrayView) {
      if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
      }
      return fromArrayLike(arrayView);
    }
    function fromArrayBuffer(array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds');
      }
      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds');
      }
      let buf;
      if (byteOffset === void 0 && length === void 0) {
        buf = new Uint8Array(array);
      } else if (length === void 0) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length);
      }
      Object.setPrototypeOf(buf, Buffer2.prototype);
      return buf;
    }
    function fromObject(obj) {
      if (Buffer2.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) {
          return buf;
        }
        obj.copy(buf, 0, 0, len);
        return buf;
      }
      if (obj.length !== void 0) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
          return createBuffer(0);
        }
        return fromArrayLike(obj);
      }
      if (obj.type === "Buffer" && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data);
      }
    }
    function checked(length) {
      if (length >= K_MAX_LENGTH) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
      }
      return length | 0;
    }
    function SlowBuffer(length) {
      if (+length != length) {
        length = 0;
      }
      return Buffer2.alloc(+length);
    }
    Buffer2.isBuffer = function isBuffer(b) {
      return b != null && b._isBuffer === true && b !== Buffer2.prototype;
    };
    Buffer2.compare = function compare(a, b) {
      if (isInstance(a, Uint8Array)) a = Buffer2.from(a, a.offset, a.byteLength);
      if (isInstance(b, Uint8Array)) b = Buffer2.from(b, b.offset, b.byteLength);
      if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
        throw new TypeError(
          'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
        );
      }
      if (a === b) return 0;
      let x = a.length;
      let y = b.length;
      for (let i2 = 0, len = Math.min(x, y); i2 < len; ++i2) {
        if (a[i2] !== b[i2]) {
          x = a[i2];
          y = b[i2];
          break;
        }
      }
      if (x < y) return -1;
      if (y < x) return 1;
      return 0;
    };
    Buffer2.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer2.concat = function concat(list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer2.alloc(0);
      }
      let i2;
      if (length === void 0) {
        length = 0;
        for (i2 = 0; i2 < list.length; ++i2) {
          length += list[i2].length;
        }
      }
      const buffer = Buffer2.allocUnsafe(length);
      let pos = 0;
      for (i2 = 0; i2 < list.length; ++i2) {
        let buf = list[i2];
        if (isInstance(buf, Uint8Array)) {
          if (pos + buf.length > buffer.length) {
            if (!Buffer2.isBuffer(buf)) buf = Buffer2.from(buf);
            buf.copy(buffer, pos);
          } else {
            Uint8Array.prototype.set.call(
              buffer,
              buf,
              pos
            );
          }
        } else if (!Buffer2.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        } else {
          buf.copy(buffer, pos);
        }
        pos += buf.length;
      }
      return buffer;
    };
    function byteLength(string, encoding) {
      if (Buffer2.isBuffer(string)) {
        return string.length;
      }
      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
        return string.byteLength;
      }
      if (typeof string !== "string") {
        throw new TypeError(
          'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
        );
      }
      const len = string.length;
      const mustMatch = arguments.length > 2 && arguments[2] === true;
      if (!mustMatch && len === 0) return 0;
      let loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "ascii":
          case "latin1":
          case "binary":
            return len;
          case "utf8":
          case "utf-8":
            return utf8ToBytes(string).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return len * 2;
          case "hex":
            return len >>> 1;
          case "base64":
            return base64ToBytes(string).length;
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes(string).length;
            }
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer2.byteLength = byteLength;
    function slowToString(encoding, start, end) {
      let loweredCase = false;
      if (start === void 0 || start < 0) {
        start = 0;
      }
      if (start > this.length) {
        return "";
      }
      if (end === void 0 || end > this.length) {
        end = this.length;
      }
      if (end <= 0) {
        return "";
      }
      end >>>= 0;
      start >>>= 0;
      if (end <= start) {
        return "";
      }
      if (!encoding) encoding = "utf8";
      while (true) {
        switch (encoding) {
          case "hex":
            return hexSlice(this, start, end);
          case "utf8":
          case "utf-8":
            return utf8Slice(this, start, end);
          case "ascii":
            return asciiSlice(this, start, end);
          case "latin1":
          case "binary":
            return latin1Slice(this, start, end);
          case "base64":
            return base64Slice(this, start, end);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return utf16leSlice(this, start, end);
          default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer2.prototype._isBuffer = true;
    function swap(b, n, m) {
      const i2 = b[n];
      b[n] = b[m];
      b[m] = i2;
    }
    Buffer2.prototype.swap16 = function swap16() {
      const len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (let i2 = 0; i2 < len; i2 += 2) {
        swap(this, i2, i2 + 1);
      }
      return this;
    };
    Buffer2.prototype.swap32 = function swap32() {
      const len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (let i2 = 0; i2 < len; i2 += 4) {
        swap(this, i2, i2 + 3);
        swap(this, i2 + 1, i2 + 2);
      }
      return this;
    };
    Buffer2.prototype.swap64 = function swap64() {
      const len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (let i2 = 0; i2 < len; i2 += 8) {
        swap(this, i2, i2 + 7);
        swap(this, i2 + 1, i2 + 6);
        swap(this, i2 + 2, i2 + 5);
        swap(this, i2 + 3, i2 + 4);
      }
      return this;
    };
    Buffer2.prototype.toString = function toString() {
      const length = this.length;
      if (length === 0) return "";
      if (arguments.length === 0) return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
    };
    Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
    Buffer2.prototype.equals = function equals(b) {
      if (!Buffer2.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
      if (this === b) return true;
      return Buffer2.compare(this, b) === 0;
    };
    Buffer2.prototype.inspect = function inspect() {
      let str = "";
      const max = exports.INSPECT_MAX_BYTES;
      str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
      if (this.length > max) str += " ... ";
      return "<Buffer " + str + ">";
    };
    if (customInspectSymbol) {
      Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
    }
    Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer2.from(target, target.offset, target.byteLength);
      }
      if (!Buffer2.isBuffer(target)) {
        throw new TypeError(
          'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
        );
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end) {
        return 1;
      }
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target) return 0;
      let x = thisEnd - thisStart;
      let y = end - start;
      const len = Math.min(x, y);
      const thisCopy = this.slice(thisStart, thisEnd);
      const targetCopy = target.slice(start, end);
      for (let i2 = 0; i2 < len; ++i2) {
        if (thisCopy[i2] !== targetCopy[i2]) {
          x = thisCopy[i2];
          y = targetCopy[i2];
          break;
        }
      }
      if (x < y) return -1;
      if (y < x) return 1;
      return 0;
    };
    function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
      if (buffer.length === 0) return -1;
      if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 2147483647) {
        byteOffset = 2147483647;
      } else if (byteOffset < -2147483648) {
        byteOffset = -2147483648;
      }
      byteOffset = +byteOffset;
      if (numberIsNaN(byteOffset)) {
        byteOffset = dir ? 0 : buffer.length - 1;
      }
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
      }
      if (typeof val === "string") {
        val = Buffer2.from(val, encoding);
      }
      if (Buffer2.isBuffer(val)) {
        if (val.length === 0) {
          return -1;
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
      } else if (typeof val === "number") {
        val = val & 255;
        if (typeof Uint8Array.prototype.indexOf === "function") {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
          }
        }
        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
      }
      throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
      let indexSize = 1;
      let arrLength = arr.length;
      let valLength = val.length;
      if (encoding !== void 0) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }
      function read(buf, i3) {
        if (indexSize === 1) {
          return buf[i3];
        } else {
          return buf.readUInt16BE(i3 * indexSize);
        }
      }
      let i2;
      if (dir) {
        let foundIndex = -1;
        for (i2 = byteOffset; i2 < arrLength; i2++) {
          if (read(arr, i2) === read(val, foundIndex === -1 ? 0 : i2 - foundIndex)) {
            if (foundIndex === -1) foundIndex = i2;
            if (i2 - foundIndex + 1 === valLength) return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1) i2 -= i2 - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i2 = byteOffset; i2 >= 0; i2--) {
          let found = true;
          for (let j = 0; j < valLength; j++) {
            if (read(arr, i2 + j) !== read(val, j)) {
              found = false;
              break;
            }
          }
          if (found) return i2;
        }
      }
      return -1;
    }
    Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };
    Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };
    function hexWrite(buf, string, offset, length) {
      offset = Number(offset) || 0;
      const remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }
      const strLen = string.length;
      if (length > strLen / 2) {
        length = strLen / 2;
      }
      let i2;
      for (i2 = 0; i2 < length; ++i2) {
        const parsed = parseInt(string.substr(i2 * 2, 2), 16);
        if (numberIsNaN(parsed)) return i2;
        buf[offset + i2] = parsed;
      }
      return i2;
    }
    function utf8Write(buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
    }
    function asciiWrite(buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length);
    }
    function base64Write(buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length);
    }
    function ucs2Write(buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
    }
    Buffer2.prototype.write = function write(string, offset, length, encoding) {
      if (offset === void 0) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
      } else if (length === void 0 && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
          length = length >>> 0;
          if (encoding === void 0) encoding = "utf8";
        } else {
          encoding = length;
          length = void 0;
        }
      } else {
        throw new Error(
          "Buffer.write(string, encoding, offset[, length]) is no longer supported"
        );
      }
      const remaining = this.length - offset;
      if (length === void 0 || length > remaining) length = remaining;
      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding) encoding = "utf8";
      let loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "hex":
            return hexWrite(this, string, offset, length);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string, offset, length);
          case "ascii":
          case "latin1":
          case "binary":
            return asciiWrite(this, string, offset, length);
          case "base64":
            return base64Write(this, string, offset, length);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string, offset, length);
          default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer2.prototype.toJSON = function toJSON() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    function base64Slice(buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64.fromByteArray(buf);
      } else {
        return base64.fromByteArray(buf.slice(start, end));
      }
    }
    function utf8Slice(buf, start, end) {
      end = Math.min(buf.length, end);
      const res = [];
      let i2 = start;
      while (i2 < end) {
        const firstByte = buf[i2];
        let codePoint = null;
        let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i2 + bytesPerSequence <= end) {
          let secondByte, thirdByte, fourthByte, tempCodePoint;
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 128) {
                codePoint = firstByte;
              }
              break;
            case 2:
              secondByte = buf[i2 + 1];
              if ((secondByte & 192) === 128) {
                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                if (tempCodePoint > 127) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 3:
              secondByte = buf[i2 + 1];
              thirdByte = buf[i2 + 2];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 4:
              secondByte = buf[i2 + 1];
              thirdByte = buf[i2 + 2];
              fourthByte = buf[i2 + 3];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }
        if (codePoint === null) {
          codePoint = 65533;
          bytesPerSequence = 1;
        } else if (codePoint > 65535) {
          codePoint -= 65536;
          res.push(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i2 += bytesPerSequence;
      }
      return decodeCodePointsArray(res);
    }
    var MAX_ARGUMENTS_LENGTH = 4096;
    function decodeCodePointsArray(codePoints) {
      const len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints);
      }
      let res = "";
      let i2 = 0;
      while (i2 < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i2, i2 += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res;
    }
    function asciiSlice(buf, start, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i2 = start; i2 < end; ++i2) {
        ret += String.fromCharCode(buf[i2] & 127);
      }
      return ret;
    }
    function latin1Slice(buf, start, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i2 = start; i2 < end; ++i2) {
        ret += String.fromCharCode(buf[i2]);
      }
      return ret;
    }
    function hexSlice(buf, start, end) {
      const len = buf.length;
      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;
      let out = "";
      for (let i2 = start; i2 < end; ++i2) {
        out += hexSliceLookupTable[buf[i2]];
      }
      return out;
    }
    function utf16leSlice(buf, start, end) {
      const bytes = buf.slice(start, end);
      let res = "";
      for (let i2 = 0; i2 < bytes.length - 1; i2 += 2) {
        res += String.fromCharCode(bytes[i2] + bytes[i2 + 1] * 256);
      }
      return res;
    }
    Buffer2.prototype.slice = function slice(start, end) {
      const len = this.length;
      start = ~~start;
      end = end === void 0 ? len : ~~end;
      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }
      if (end < start) end = start;
      const newBuf = this.subarray(start, end);
      Object.setPrototypeOf(newBuf, Buffer2.prototype);
      return newBuf;
    };
    function checkOffset(offset, ext, length) {
      if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
      if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength2, this.length);
      let val = this[offset];
      let mul = 1;
      let i2 = 0;
      while (++i2 < byteLength2 && (mul *= 256)) {
        val += this[offset + i2] * mul;
      }
      return val;
    };
    Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        checkOffset(offset, byteLength2, this.length);
      }
      let val = this[offset + --byteLength2];
      let mul = 1;
      while (byteLength2 > 0 && (mul *= 256)) {
        val += this[offset + --byteLength2] * mul;
      }
      return val;
    };
    Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset];
    };
    Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };
    Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };
    Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
      const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
      return BigInt(lo) + (BigInt(hi) << BigInt(32));
    });
    Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
      const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
      return (BigInt(hi) << BigInt(32)) + BigInt(lo);
    });
    Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength2, this.length);
      let val = this[offset];
      let mul = 1;
      let i2 = 0;
      while (++i2 < byteLength2 && (mul *= 256)) {
        val += this[offset + i2] * mul;
      }
      mul *= 128;
      if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength2, this.length);
      let i2 = byteLength2;
      let mul = 1;
      let val = this[offset + --i2];
      while (i2 > 0 && (mul *= 256)) {
        val += this[offset + --i2] * mul;
      }
      mul *= 128;
      if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 128)) return this[offset];
      return (255 - this[offset] + 1) * -1;
    };
    Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      const val = this[offset] | this[offset + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      const val = this[offset + 1] | this[offset] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
      return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
    });
    Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const val = (first << 24) + // Overflow
      this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
      return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
    });
    Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, true, 23, 4);
    };
    Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, false, 23, 4);
    };
    Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, true, 52, 8);
    };
    Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, false, 52, 8);
    };
    function checkInt(buf, value, offset, ext, max, min) {
      if (!Buffer2.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
      if (offset + ext > buf.length) throw new RangeError("Index out of range");
    }
    Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      let mul = 1;
      let i2 = 0;
      this[offset] = value & 255;
      while (++i2 < byteLength2 && (mul *= 256)) {
        this[offset + i2] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      let i2 = byteLength2 - 1;
      let mul = 1;
      this[offset + i2] = value & 255;
      while (--i2 >= 0 && (mul *= 256)) {
        this[offset + i2] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset + 3] = value >>> 24;
      this[offset + 2] = value >>> 16;
      this[offset + 1] = value >>> 8;
      this[offset] = value & 255;
      return offset + 4;
    };
    Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    function wrtBigUInt64LE(buf, value, offset, min, max) {
      checkIntBI(value, min, max, buf, offset, 7);
      let lo = Number(value & BigInt(4294967295));
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(4294967295));
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      return offset;
    }
    function wrtBigUInt64BE(buf, value, offset, min, max) {
      checkIntBI(value, min, max, buf, offset, 7);
      let lo = Number(value & BigInt(4294967295));
      buf[offset + 7] = lo;
      lo = lo >> 8;
      buf[offset + 6] = lo;
      lo = lo >> 8;
      buf[offset + 5] = lo;
      lo = lo >> 8;
      buf[offset + 4] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(4294967295));
      buf[offset + 3] = hi;
      hi = hi >> 8;
      buf[offset + 2] = hi;
      hi = hi >> 8;
      buf[offset + 1] = hi;
      hi = hi >> 8;
      buf[offset] = hi;
      return offset + 8;
    }
    Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      let i2 = 0;
      let mul = 1;
      let sub = 0;
      this[offset] = value & 255;
      while (++i2 < byteLength2 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i2 - 1] !== 0) {
          sub = 1;
        }
        this[offset + i2] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      let i2 = byteLength2 - 1;
      let mul = 1;
      let sub = 0;
      this[offset + i2] = value & 255;
      while (--i2 >= 0 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i2 + 1] !== 0) {
          sub = 1;
        }
        this[offset + i2] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
      if (value < 0) value = 255 + value + 1;
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      this[offset + 2] = value >>> 16;
      this[offset + 3] = value >>> 24;
      return offset + 4;
    };
    Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (value < 0) value = 4294967295 + value + 1;
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    function checkIEEE754(buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError("Index out of range");
      if (offset < 0) throw new RangeError("Index out of range");
    }
    function writeFloat(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
      }
      ieee754.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4;
    }
    Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert);
    };
    Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert);
    };
    function writeDouble(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
      }
      ieee754.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8;
    }
    Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert);
    };
    Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert);
    };
    Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
      if (!Buffer2.isBuffer(target)) throw new TypeError("argument should be a Buffer");
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;
      if (end === start) return 0;
      if (target.length === 0 || this.length === 0) return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
      if (end < 0) throw new RangeError("sourceEnd out of bounds");
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      const len = end - start;
      if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
        this.copyWithin(targetStart, start, end);
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, end),
          targetStart
        );
      }
      return len;
    };
    Buffer2.prototype.fill = function fill(val, start, end, encoding) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding = end;
          end = this.length;
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        if (val.length === 1) {
          const code = val.charCodeAt(0);
          if (encoding === "utf8" && code < 128 || encoding === "latin1") {
            val = code;
          }
        }
      } else if (typeof val === "number") {
        val = val & 255;
      } else if (typeof val === "boolean") {
        val = Number(val);
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val) val = 0;
      let i2;
      if (typeof val === "number") {
        for (i2 = start; i2 < end; ++i2) {
          this[i2] = val;
        }
      } else {
        const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
        const len = bytes.length;
        if (len === 0) {
          throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        }
        for (i2 = 0; i2 < end - start; ++i2) {
          this[i2 + start] = bytes[i2 % len];
        }
      }
      return this;
    };
    var errors = {};
    function E(sym, getMessage, Base) {
      errors[sym] = class NodeError extends Base {
        constructor() {
          super();
          Object.defineProperty(this, "message", {
            value: getMessage.apply(this, arguments),
            writable: true,
            configurable: true
          });
          this.name = `${this.name} [${sym}]`;
          this.stack;
          delete this.name;
        }
        get code() {
          return sym;
        }
        set code(value) {
          Object.defineProperty(this, "code", {
            configurable: true,
            enumerable: true,
            value,
            writable: true
          });
        }
        toString() {
          return `${this.name} [${sym}]: ${this.message}`;
        }
      };
    }
    E(
      "ERR_BUFFER_OUT_OF_BOUNDS",
      function(name) {
        if (name) {
          return `${name} is outside of buffer bounds`;
        }
        return "Attempt to access memory outside buffer bounds";
      },
      RangeError
    );
    E(
      "ERR_INVALID_ARG_TYPE",
      function(name, actual) {
        return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
      },
      TypeError
    );
    E(
      "ERR_OUT_OF_RANGE",
      function(str, range, input) {
        let msg = `The value of "${str}" is out of range.`;
        let received = input;
        if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
          received = addNumericalSeparator(String(input));
        } else if (typeof input === "bigint") {
          received = String(input);
          if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
            received = addNumericalSeparator(received);
          }
          received += "n";
        }
        msg += ` It must be ${range}. Received ${received}`;
        return msg;
      },
      RangeError
    );
    function addNumericalSeparator(val) {
      let res = "";
      let i2 = val.length;
      const start = val[0] === "-" ? 1 : 0;
      for (; i2 >= start + 4; i2 -= 3) {
        res = `_${val.slice(i2 - 3, i2)}${res}`;
      }
      return `${val.slice(0, i2)}${res}`;
    }
    function checkBounds(buf, offset, byteLength2) {
      validateNumber(offset, "offset");
      if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
        boundsError(offset, buf.length - (byteLength2 + 1));
      }
    }
    function checkIntBI(value, min, max, buf, offset, byteLength2) {
      if (value > max || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength2 > 3) {
          if (min === 0 || min === BigInt(0)) {
            range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
          } else {
            range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
          }
        } else {
          range = `>= ${min}${n} and <= ${max}${n}`;
        }
        throw new errors.ERR_OUT_OF_RANGE("value", range, value);
      }
      checkBounds(buf, offset, byteLength2);
    }
    function validateNumber(value, name) {
      if (typeof value !== "number") {
        throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
      }
    }
    function boundsError(value, length, type) {
      if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
      }
      if (length < 0) {
        throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
      }
      throw new errors.ERR_OUT_OF_RANGE(
        type || "offset",
        `>= ${type ? 1 : 0} and <= ${length}`,
        value
      );
    }
    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
    function base64clean(str) {
      str = str.split("=")[0];
      str = str.trim().replace(INVALID_BASE64_RE, "");
      if (str.length < 2) return "";
      while (str.length % 4 !== 0) {
        str = str + "=";
      }
      return str;
    }
    function utf8ToBytes(string, units) {
      units = units || Infinity;
      let codePoint;
      const length = string.length;
      let leadSurrogate = null;
      const bytes = [];
      for (let i2 = 0; i2 < length; ++i2) {
        codePoint = string.charCodeAt(i2);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units -= 3) > -1) bytes.push(239, 191, 189);
              continue;
            } else if (i2 + 1 === length) {
              if ((units -= 3) > -1) bytes.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units -= 3) > -1) bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units -= 1) < 0) break;
          bytes.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units -= 2) < 0) break;
          bytes.push(
            codePoint >> 6 | 192,
            codePoint & 63 | 128
          );
        } else if (codePoint < 65536) {
          if ((units -= 3) < 0) break;
          bytes.push(
            codePoint >> 12 | 224,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else if (codePoint < 1114112) {
          if ((units -= 4) < 0) break;
          bytes.push(
            codePoint >> 18 | 240,
            codePoint >> 12 & 63 | 128,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes;
    }
    function asciiToBytes(str) {
      const byteArray = [];
      for (let i2 = 0; i2 < str.length; ++i2) {
        byteArray.push(str.charCodeAt(i2) & 255);
      }
      return byteArray;
    }
    function utf16leToBytes(str, units) {
      let c, hi, lo;
      const byteArray = [];
      for (let i2 = 0; i2 < str.length; ++i2) {
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i2);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }
      return byteArray;
    }
    function base64ToBytes(str) {
      return base64.toByteArray(base64clean(str));
    }
    function blitBuffer(src, dst, offset, length) {
      let i2;
      for (i2 = 0; i2 < length; ++i2) {
        if (i2 + offset >= dst.length || i2 >= src.length) break;
        dst[i2 + offset] = src[i2];
      }
      return i2;
    }
    function isInstance(obj, type) {
      return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
    }
    function numberIsNaN(obj) {
      return obj !== obj;
    }
    var hexSliceLookupTable = function() {
      const alphabet = "0123456789abcdef";
      const table = new Array(256);
      for (let i2 = 0; i2 < 16; ++i2) {
        const i16 = i2 * 16;
        for (let j = 0; j < 16; ++j) {
          table[i16 + j] = alphabet[i2] + alphabet[j];
        }
      }
      return table;
    }();
    function defineBigIntMethod(fn) {
      return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
    }
    function BufferBigIntNotDefined() {
      throw new Error("BigInt not supported");
    }
  }
});

// node_modules/sha3/sponge/permute/copy/index.js
var require_copy = __commonJS({
  "node_modules/sha3/sponge/permute/copy/index.js"(exports, module) {
    "use strict";
    var copy = function copy2(I, i2) {
      return function(O, o) {
        var oi = o * 2;
        var ii = i2 * 2;
        O[oi] = I[ii];
        O[oi + 1] = I[ii + 1];
      };
    };
    module.exports = copy;
  }
});

// node_modules/sha3/sponge/permute/chi/index.js
var require_chi = __commonJS({
  "node_modules/sha3/sponge/permute/chi/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var _copy = _interopRequireDefault(require_copy());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var chi = function chi2(_ref) {
      var A = _ref.A, C = _ref.C;
      for (var y = 0; y < 25; y += 5) {
        for (var x = 0; x < 5; x++) {
          (0, _copy["default"])(A, y + x)(C, x);
        }
        for (var _x = 0; _x < 5; _x++) {
          var xy = (y + _x) * 2;
          var x1 = (_x + 1) % 5 * 2;
          var x2 = (_x + 2) % 5 * 2;
          A[xy] ^= ~C[x1] & C[x2];
          A[xy + 1] ^= ~C[x1 + 1] & C[x2 + 1];
        }
      }
    };
    var _default = chi;
    exports["default"] = _default;
  }
});

// node_modules/sha3/sponge/permute/iota/round-constants/index.js
var require_round_constants = __commonJS({
  "node_modules/sha3/sponge/permute/iota/round-constants/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var ROUND_CONSTANTS = new Uint32Array([0, 1, 0, 32898, 2147483648, 32906, 2147483648, 2147516416, 0, 32907, 0, 2147483649, 2147483648, 2147516545, 2147483648, 32777, 0, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 2147483648, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 0, 32778, 2147483648, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 0, 2147483649, 2147483648, 2147516424]);
    var _default = ROUND_CONSTANTS;
    exports["default"] = _default;
  }
});

// node_modules/sha3/sponge/permute/iota/index.js
var require_iota = __commonJS({
  "node_modules/sha3/sponge/permute/iota/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var _roundConstants = _interopRequireDefault(require_round_constants());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var iota = function iota2(_ref) {
      var A = _ref.A, roundIndex = _ref.roundIndex;
      var i2 = roundIndex * 2;
      A[0] ^= _roundConstants["default"][i2];
      A[1] ^= _roundConstants["default"][i2 + 1];
    };
    var _default = iota;
    exports["default"] = _default;
  }
});

// node_modules/sha3/sponge/permute/rho-pi/pi-shuffles/index.js
var require_pi_shuffles = __commonJS({
  "node_modules/sha3/sponge/permute/rho-pi/pi-shuffles/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var PI_SHUFFLES = [10, 7, 11, 17, 18, 3, 5, 16, 8, 21, 24, 4, 15, 23, 19, 13, 12, 2, 20, 14, 22, 9, 6, 1];
    var _default = PI_SHUFFLES;
    exports["default"] = _default;
  }
});

// node_modules/sha3/sponge/permute/rho-pi/rho-offsets/index.js
var require_rho_offsets = __commonJS({
  "node_modules/sha3/sponge/permute/rho-pi/rho-offsets/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var RHO_OFFSETS = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 2, 14, 27, 41, 56, 8, 25, 43, 62, 18, 39, 61, 20, 44];
    var _default = RHO_OFFSETS;
    exports["default"] = _default;
  }
});

// node_modules/sha3/sponge/permute/rho-pi/index.js
var require_rho_pi = __commonJS({
  "node_modules/sha3/sponge/permute/rho-pi/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var _piShuffles = _interopRequireDefault(require_pi_shuffles());
    var _rhoOffsets = _interopRequireDefault(require_rho_offsets());
    var _copy = _interopRequireDefault(require_copy());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var rhoPi = function rhoPi2(_ref) {
      var A = _ref.A, C = _ref.C, W = _ref.W;
      (0, _copy["default"])(A, 1)(W, 0);
      var H = 0;
      var L = 0;
      var Wi = 0;
      var ri = 32;
      for (var i2 = 0; i2 < 24; i2++) {
        var j = _piShuffles["default"][i2];
        var r = _rhoOffsets["default"][i2];
        (0, _copy["default"])(A, j)(C, 0);
        H = W[0];
        L = W[1];
        ri = 32 - r;
        Wi = r < 32 ? 0 : 1;
        W[Wi] = H << r | L >>> ri;
        W[(Wi + 1) % 2] = L << r | H >>> ri;
        (0, _copy["default"])(W, 0)(A, j);
        (0, _copy["default"])(C, 0)(W, 0);
      }
    };
    var _default = rhoPi;
    exports["default"] = _default;
  }
});

// node_modules/sha3/sponge/permute/theta/index.js
var require_theta = __commonJS({
  "node_modules/sha3/sponge/permute/theta/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var _copy = _interopRequireDefault(require_copy());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var theta = function theta2(_ref) {
      var A = _ref.A, C = _ref.C, D = _ref.D, W = _ref.W;
      var H = 0;
      var L = 0;
      for (var x = 0; x < 5; x++) {
        var x20 = x * 2;
        var x21 = (x + 5) * 2;
        var x22 = (x + 10) * 2;
        var x23 = (x + 15) * 2;
        var x24 = (x + 20) * 2;
        C[x20] = A[x20] ^ A[x21] ^ A[x22] ^ A[x23] ^ A[x24];
        C[x20 + 1] = A[x20 + 1] ^ A[x21 + 1] ^ A[x22 + 1] ^ A[x23 + 1] ^ A[x24 + 1];
      }
      for (var _x = 0; _x < 5; _x++) {
        (0, _copy["default"])(C, (_x + 1) % 5)(W, 0);
        H = W[0];
        L = W[1];
        W[0] = H << 1 | L >>> 31;
        W[1] = L << 1 | H >>> 31;
        D[_x * 2] = C[(_x + 4) % 5 * 2] ^ W[0];
        D[_x * 2 + 1] = C[(_x + 4) % 5 * 2 + 1] ^ W[1];
        for (var y = 0; y < 25; y += 5) {
          A[(y + _x) * 2] ^= D[_x * 2];
          A[(y + _x) * 2 + 1] ^= D[_x * 2 + 1];
        }
      }
    };
    var _default = theta;
    exports["default"] = _default;
  }
});

// node_modules/sha3/sponge/permute/index.js
var require_permute = __commonJS({
  "node_modules/sha3/sponge/permute/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var _chi = _interopRequireDefault(require_chi());
    var _iota = _interopRequireDefault(require_iota());
    var _rhoPi = _interopRequireDefault(require_rho_pi());
    var _theta = _interopRequireDefault(require_theta());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var permute = function permute2() {
      var C = new Uint32Array(10);
      var D = new Uint32Array(10);
      var W = new Uint32Array(2);
      return function(A) {
        for (var roundIndex = 0; roundIndex < 24; roundIndex++) {
          (0, _theta["default"])({ A, C, D, W });
          (0, _rhoPi["default"])({ A, C, W });
          (0, _chi["default"])({ A, C });
          (0, _iota["default"])({ A, roundIndex });
        }
        C.fill(0);
        D.fill(0);
        W.fill(0);
      };
    };
    var _default = permute;
    exports["default"] = _default;
  }
});

// node_modules/sha3/sponge/index.js
var require_sponge = __commonJS({
  "node_modules/sha3/sponge/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var _buffer = require_buffer();
    var _permute = _interopRequireDefault(require_permute());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var xorWords = function xorWords2(I, O) {
      for (var i2 = 0; i2 < I.length; i2 += 8) {
        var o = i2 / 4;
        O[o] ^= I[i2 + 7] << 24 | I[i2 + 6] << 16 | I[i2 + 5] << 8 | I[i2 + 4];
        O[o + 1] ^= I[i2 + 3] << 24 | I[i2 + 2] << 16 | I[i2 + 1] << 8 | I[i2];
      }
      return O;
    };
    var readWords = function readWords2(I, O) {
      for (var o = 0; o < O.length; o += 8) {
        var i2 = o / 4;
        O[o] = I[i2 + 1];
        O[o + 1] = I[i2 + 1] >>> 8;
        O[o + 2] = I[i2 + 1] >>> 16;
        O[o + 3] = I[i2 + 1] >>> 24;
        O[o + 4] = I[i2];
        O[o + 5] = I[i2] >>> 8;
        O[o + 6] = I[i2] >>> 16;
        O[o + 7] = I[i2] >>> 24;
      }
      return O;
    };
    var Sponge = function Sponge2(_ref) {
      var _this = this;
      var capacity = _ref.capacity, padding = _ref.padding;
      var keccak = (0, _permute["default"])();
      var stateSize = 200;
      var blockSize = capacity / 8;
      var queueSize = stateSize - capacity / 4;
      var queueOffset = 0;
      var state = new Uint32Array(stateSize / 4);
      var queue = _buffer.Buffer.allocUnsafe(queueSize);
      this.absorb = function(buffer) {
        for (var i2 = 0; i2 < buffer.length; i2++) {
          queue[queueOffset] = buffer[i2];
          queueOffset += 1;
          if (queueOffset >= queueSize) {
            xorWords(queue, state);
            keccak(state);
            queueOffset = 0;
          }
        }
        return _this;
      };
      this.squeeze = function() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var output = { buffer: options.buffer || _buffer.Buffer.allocUnsafe(blockSize), padding: options.padding || padding, queue: _buffer.Buffer.allocUnsafe(queue.length), state: new Uint32Array(state.length) };
        queue.copy(output.queue);
        for (var i2 = 0; i2 < state.length; i2++) {
          output.state[i2] = state[i2];
        }
        output.queue.fill(0, queueOffset);
        output.queue[queueOffset] |= output.padding;
        output.queue[queueSize - 1] |= 128;
        xorWords(output.queue, output.state);
        for (var offset = 0; offset < output.buffer.length; offset += queueSize) {
          keccak(output.state);
          readWords(output.state, output.buffer.slice(offset, offset + queueSize));
        }
        return output.buffer;
      };
      this.reset = function() {
        queue.fill(0);
        state.fill(0);
        queueOffset = 0;
        return _this;
      };
      return this;
    };
    var _default = Sponge;
    exports["default"] = _default;
  }
});

// node_modules/sha3/index.js
var require_sha3 = __commonJS({
  "node_modules/sha3/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = exports.SHAKE = exports.SHA3Hash = exports.SHA3 = exports.Keccak = void 0;
    var _buffer = require_buffer();
    var _sponge = _interopRequireDefault(require_sponge());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var createHash = function createHash2(_ref) {
      var allowedSizes = _ref.allowedSizes, defaultSize = _ref.defaultSize, padding = _ref.padding;
      return function Hash() {
        var _this = this;
        var size = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultSize;
        if (!this || this.constructor !== Hash) {
          return new Hash(size);
        }
        if (allowedSizes && !allowedSizes.includes(size)) {
          throw new Error("Unsupported hash length");
        }
        var sponge = new _sponge["default"]({ capacity: size });
        this.update = function(input) {
          var encoding = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "utf8";
          if (_buffer.Buffer.isBuffer(input)) {
            sponge.absorb(input);
            return _this;
          }
          if (typeof input === "string") {
            return _this.update(_buffer.Buffer.from(input, encoding));
          }
          throw new TypeError("Not a string or buffer");
        };
        this.digest = function() {
          var formatOrOptions = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "binary";
          var options = typeof formatOrOptions === "string" ? { format: formatOrOptions } : formatOrOptions;
          var buffer = sponge.squeeze({ buffer: options.buffer, padding: options.padding || padding });
          if (options.format && options.format !== "binary") {
            return buffer.toString(options.format);
          }
          return buffer;
        };
        this.reset = function() {
          sponge.reset();
          return _this;
        };
        return this;
      };
    };
    var Keccak = createHash({ allowedSizes: [224, 256, 384, 512], defaultSize: 512, padding: 1 });
    exports.Keccak = Keccak;
    var SHA3 = createHash({ allowedSizes: [224, 256, 384, 512], defaultSize: 512, padding: 6 });
    exports.SHA3 = SHA3;
    var SHAKE = createHash({ allowedSizes: [128, 256], defaultSize: 256, padding: 31 });
    exports.SHAKE = SHAKE;
    var SHA3Hash = Keccak;
    exports.SHA3Hash = SHA3Hash;
    SHA3.SHA3Hash = SHA3Hash;
    var _default = SHA3;
    exports["default"] = _default;
  }
});

// kyber512.js
var require_kyber512 = __commonJS({
  "kyber512.js"(exports) {
    var { SHA3, SHAKE } = require_sha3();
    var webcrypto = window.crypto.subtle;
    var nttZetas = [
      2285,
      2571,
      2970,
      1812,
      1493,
      1422,
      287,
      202,
      3158,
      622,
      1577,
      182,
      962,
      2127,
      1855,
      1468,
      573,
      2004,
      264,
      383,
      2500,
      1458,
      1727,
      3199,
      2648,
      1017,
      732,
      608,
      1787,
      411,
      3124,
      1758,
      1223,
      652,
      2777,
      1015,
      2036,
      1491,
      3047,
      1785,
      516,
      3321,
      3009,
      2663,
      1711,
      2167,
      126,
      1469,
      2476,
      3239,
      3058,
      830,
      107,
      1908,
      3082,
      2378,
      2931,
      961,
      1821,
      2604,
      448,
      2264,
      677,
      2054,
      2226,
      430,
      555,
      843,
      2078,
      871,
      1550,
      105,
      422,
      587,
      177,
      3094,
      3038,
      2869,
      1574,
      1653,
      3083,
      778,
      1159,
      3182,
      2552,
      1483,
      2727,
      1119,
      1739,
      644,
      2457,
      349,
      418,
      329,
      3173,
      3254,
      817,
      1097,
      603,
      610,
      1322,
      2044,
      1864,
      384,
      2114,
      3193,
      1218,
      1994,
      2455,
      220,
      2142,
      1670,
      2144,
      1799,
      2051,
      794,
      1819,
      2475,
      2459,
      478,
      3221,
      3021,
      996,
      991,
      958,
      1869,
      1522,
      1628
    ];
    var nttZetasInv = [
      1701,
      1807,
      1460,
      2371,
      2338,
      2333,
      308,
      108,
      2851,
      870,
      854,
      1510,
      2535,
      1278,
      1530,
      1185,
      1659,
      1187,
      3109,
      874,
      1335,
      2111,
      136,
      1215,
      2945,
      1465,
      1285,
      2007,
      2719,
      2726,
      2232,
      2512,
      75,
      156,
      3e3,
      2911,
      2980,
      872,
      2685,
      1590,
      2210,
      602,
      1846,
      777,
      147,
      2170,
      2551,
      246,
      1676,
      1755,
      460,
      291,
      235,
      3152,
      2742,
      2907,
      3224,
      1779,
      2458,
      1251,
      2486,
      2774,
      2899,
      1103,
      1275,
      2652,
      1065,
      2881,
      725,
      1508,
      2368,
      398,
      951,
      247,
      1421,
      3222,
      2499,
      271,
      90,
      853,
      1860,
      3203,
      1162,
      1618,
      666,
      320,
      8,
      2813,
      1544,
      282,
      1838,
      1293,
      2314,
      552,
      2677,
      2106,
      1571,
      205,
      2918,
      1542,
      2721,
      2597,
      2312,
      681,
      130,
      1602,
      1871,
      829,
      2946,
      3065,
      1325,
      2756,
      1861,
      1474,
      1202,
      2367,
      3147,
      1752,
      2707,
      171,
      3127,
      3042,
      1907,
      1836,
      1517,
      359,
      758,
      1441
    ];
    var paramsK = 2;
    var paramsN = 256;
    var paramsQ = 3329;
    var paramsQinv = 62209;
    var paramsETA1 = 3;
    var paramsETA2 = 2;
    KeyGen512 = function() {
      let indcpakeys = indcpaKeyGen();
      let pk = indcpakeys[0];
      let sk = indcpakeys[1];
      const buffer1 = Buffer.from(pk);
      const hash1 = new SHA3(256);
      hash1.update(buffer1);
      let pkh = hash1.digest();
      let rnd = new Uint8Array(32);
      webcrypto.getRandomValues(rnd);
      for (let i2 = 0; i2 < pk.length; i2++) {
        sk.push(pk[i2]);
      }
      for (let i2 = 0; i2 < pkh.length; i2++) {
        sk.push(pkh[i2]);
      }
      for (let i2 = 0; i2 < rnd.length; i2++) {
        sk.push(rnd[i2]);
      }
      let keys = new Array(2);
      keys[0] = pk;
      keys[1] = sk;
      return keys;
    };
    Encrypt512 = function(pk) {
      let m = new Uint8Array(32);
      webcrypto.getRandomValues(m);
      const buffer1 = Buffer.from(m);
      const hash1 = new SHA3(256);
      hash1.update(buffer1);
      let mh = hash1.digest();
      const buffer2 = Buffer.from(pk);
      const hash2 = new SHA3(256);
      hash2.update(buffer2);
      let pkh = hash2.digest();
      const buffer3 = Buffer.from(mh);
      const buffer4 = Buffer.from(pkh);
      const hash3 = new SHA3(512);
      hash3.update(buffer3).update(buffer4);
      let kr = new Uint8Array(hash3.digest());
      let kr1 = kr.slice(0, 32);
      let kr2 = kr.slice(32, 64);
      let c = indcpaEncrypt(pk, mh, kr2);
      const buffer5 = Buffer.from(c);
      const hash4 = new SHA3(256);
      hash4.update(buffer5);
      let ch = hash4.digest();
      const buffer6 = Buffer.from(kr1);
      const buffer7 = Buffer.from(ch);
      const hash5 = new SHAKE(256);
      hash5.update(buffer6).update(buffer7);
      let ss = hash5.digest();
      let result = new Array(2);
      result[0] = c;
      result[1] = ss;
      return result;
    };
    Decrypt512 = function(c, privateKey) {
      let sk = privateKey.slice(0, 768);
      let pk = privateKey.slice(768, 1568);
      let pkh = privateKey.slice(1568, 1600);
      let z = privateKey.slice(1600, 1632);
      let m = indcpaDecrypt(c, sk);
      const buffer1 = Buffer.from(m);
      const buffer2 = Buffer.from(pkh);
      const hash1 = new SHA3(512);
      hash1.update(buffer1).update(buffer2);
      let kr = new Uint8Array(hash1.digest());
      let kr1 = kr.slice(0, 32);
      let kr2 = kr.slice(32, 64);
      let cmp = indcpaEncrypt(pk, m, kr2);
      let fail = ArrayCompare(c, cmp) - 1;
      const buffer3 = Buffer.from(c);
      const hash2 = new SHA3(256);
      hash2.update(buffer3);
      let ch = hash2.digest();
      let ss = [];
      if (!fail) {
        const buffer4 = Buffer.from(kr1);
        const buffer5 = Buffer.from(ch);
        const hash3 = new SHAKE(256);
        hash3.update(buffer4).update(buffer5);
        ss = hash3.digest();
      } else {
        const buffer6 = Buffer.from(z);
        const buffer7 = Buffer.from(ch);
        const hash4 = new SHAKE(256);
        hash4.update(buffer6).update(buffer7);
        ss = hash4.digest();
      }
      return ss;
    };
    function indcpaKeyGen() {
      let rnd = new Uint8Array(32);
      webcrypto.getRandomValues(rnd);
      const buffer1 = Buffer.from(rnd);
      const hash1 = new SHA3(512);
      hash1.update(buffer1);
      let seed = new Uint8Array(hash1.digest());
      let publicSeed = seed.slice(0, 32);
      let noiseSeed = seed.slice(32, 64);
      let a = generateMatrixA(publicSeed, false, paramsK);
      let s = new Array(paramsK);
      let nonce = 0;
      for (let i2 = 0; i2 < paramsK; i2++) {
        s[i2] = sample1(noiseSeed, nonce);
        nonce = nonce + 1;
      }
      let e = new Array(paramsK);
      for (let i2 = 0; i2 < paramsK; i2++) {
        e[i2] = sample1(noiseSeed, nonce);
        nonce = nonce + 1;
      }
      for (let i2 = 0; i2 < paramsK; i2++) {
        s[i2] = ntt(s[i2]);
      }
      for (let i2 = 0; i2 < paramsK; i2++) {
        e[i2] = ntt(e[i2]);
      }
      for (let i2 = 0; i2 < paramsK; i2++) {
        s[i2] = reduce(s[i2]);
      }
      let pk = new Array(paramsK);
      for (let i2 = 0; i2 < paramsK; i2++) {
        pk[i2] = polyToMont(multiply(a[i2], s));
      }
      for (let i2 = 0; i2 < paramsK; i2++) {
        pk[i2] = add(pk[i2], e[i2]);
      }
      for (let i2 = 0; i2 < paramsK; i2++) {
        pk[i2] = reduce(pk[i2]);
      }
      let keys = new Array(2);
      keys[0] = [];
      let bytes = [];
      for (let i2 = 0; i2 < paramsK; i2++) {
        bytes = polyToBytes(pk[i2]);
        for (let j = 0; j < bytes.length; j++) {
          keys[0].push(bytes[j]);
        }
      }
      for (let i2 = 0; i2 < publicSeed.length; i2++) {
        keys[0].push(publicSeed[i2]);
      }
      keys[1] = [];
      bytes = [];
      for (let i2 = 0; i2 < paramsK; i2++) {
        bytes = polyToBytes(s[i2]);
        for (let j = 0; j < bytes.length; j++) {
          keys[1].push(bytes[j]);
        }
      }
      return keys;
    }
    function indcpaEncrypt(pk1, msg, coins) {
      let pk = new Array(paramsK);
      let start;
      let end;
      for (let i2 = 0; i2 < paramsK; i2++) {
        start = i2 * 384;
        end = (i2 + 1) * 384;
        pk[i2] = polyFromBytes(pk1.slice(start, end));
      }
      let seed = pk1.slice(768, 800);
      let at = generateMatrixA(seed, true);
      let r = new Array(paramsK);
      let nonce = 0;
      for (let i2 = 0; i2 < paramsK; i2++) {
        r[i2] = sample1(coins, nonce);
        nonce = nonce + 1;
      }
      let e1 = new Array(paramsK);
      for (let i2 = 0; i2 < paramsK; i2++) {
        e1[i2] = sample2(coins, nonce);
        nonce = nonce + 1;
      }
      let e2 = sample2(coins, nonce);
      for (let i2 = 0; i2 < paramsK; i2++) {
        r[i2] = ntt(r[i2]);
      }
      for (let i2 = 0; i2 < paramsK; i2++) {
        r[i2] = reduce(r[i2]);
      }
      let u = new Array(paramsK);
      for (i = 0; i < paramsK; i++) {
        u[i] = multiply(at[i], r);
      }
      for (let i2 = 0; i2 < paramsK; i2++) {
        u[i2] = nttInverse(u[i2]);
      }
      for (let i2 = 0; i2 < paramsK; i2++) {
        u[i2] = add(u[i2], e1[i2]);
      }
      let m = polyFromMsg(msg);
      let v = multiply(pk, r);
      v = nttInverse(v);
      v = add(v, e2);
      v = add(v, m);
      for (let i2 = 0; i2 < paramsK; i2++) {
        u[i2] = reduce(u[i2]);
      }
      v = reduce(v);
      let c1 = compress1(u);
      let c2 = compress2(v);
      return c1.concat(c2);
    }
    function indcpaDecrypt(c, privateKey) {
      let u = decompress1(c.slice(0, 640));
      let v = decompress2(c.slice(640, 768));
      let privateKeyPolyvec = polyvecFromBytes(privateKey);
      for (let i2 = 0; i2 < paramsK; i2++) {
        u[i2] = ntt(u[i2]);
      }
      let mp = multiply(privateKeyPolyvec, u);
      mp = nttInverse(mp);
      mp = subtract(v, mp);
      mp = reduce(mp);
      return polyToMsg(mp);
    }
    function polyvecFromBytes(a) {
      let r = new Array(paramsK);
      for (let i2 = 0; i2 < paramsK; i2++) {
        r[i2] = new Array(384);
      }
      let start;
      let end;
      for (let i2 = 0; i2 < paramsK; i2++) {
        start = i2 * 384;
        end = (i2 + 1) * 384;
        r[i2] = polyFromBytes(a.slice(start, end));
      }
      return r;
    }
    function polyToBytes(a) {
      let t0, t1;
      let r = new Array(384);
      let a2 = subtract_q(a);
      for (let i2 = 0; i2 < paramsN / 2; i2++) {
        t0 = uint16(a2[2 * i2]);
        t1 = uint16(a2[2 * i2 + 1]);
        r[3 * i2 + 0] = byte(t0 >> 0);
        r[3 * i2 + 1] = byte(t0 >> 8) | byte(t1 << 4);
        r[3 * i2 + 2] = byte(t1 >> 4);
      }
      return r;
    }
    function polyFromBytes(a) {
      let r = new Array(384).fill(0);
      for (let i2 = 0; i2 < paramsN / 2; i2++) {
        r[2 * i2] = int16((uint16(a[3 * i2 + 0]) >> 0 | uint16(a[3 * i2 + 1]) << 8) & 4095);
        r[2 * i2 + 1] = int16((uint16(a[3 * i2 + 1]) >> 4 | uint16(a[3 * i2 + 2]) << 4) & 4095);
      }
      return r;
    }
    function polyToMsg(a) {
      let msg = new Array(32);
      let t;
      let a2 = subtract_q(a);
      for (let i2 = 0; i2 < paramsN / 8; i2++) {
        msg[i2] = 0;
        for (let j = 0; j < 8; j++) {
          t = ((uint16(a2[8 * i2 + j]) << 1) + uint16(paramsQ / 2)) / uint16(paramsQ) & 1;
          msg[i2] |= byte(t << j);
        }
      }
      return msg;
    }
    function polyFromMsg(msg) {
      let r = new Array(384).fill(0);
      let mask;
      for (let i2 = 0; i2 < paramsN / 8; i2++) {
        for (let j = 0; j < 8; j++) {
          mask = -1 * int16(msg[i2] >> j & 1);
          r[8 * i2 + j] = mask & int16((paramsQ + 1) / 2);
        }
      }
      return r;
    }
    function generateMatrixA(seed, transposed) {
      let a = new Array(paramsK);
      let output = new Array(3 * 168);
      const xof = new SHAKE(128);
      let ctr = 0;
      for (let i2 = 0; i2 < paramsK; i2++) {
        a[i2] = new Array(paramsK);
        let transpose = new Array(2);
        for (let j = 0; j < paramsK; j++) {
          transpose[0] = j;
          transpose[1] = i2;
          if (transposed) {
            transpose[0] = i2;
            transpose[1] = j;
          }
          xof.reset();
          const buffer1 = Buffer.from(seed);
          const buffer2 = Buffer.from(transpose);
          xof.update(buffer1).update(buffer2);
          let output2 = new Uint8Array(xof.digest({ buffer: Buffer.alloc(672) }));
          let outputlen = 3 * 168;
          let result = new Array(2);
          result = indcpaRejUniform(output2.slice(0, 504), outputlen, paramsN);
          a[i2][j] = result[0];
          ctr = result[1];
          while (ctr < paramsN) {
            let outputn = output2.slice(504, 672);
            let result1 = new Array(2);
            result1 = indcpaRejUniform(outputn, 168, paramsN - ctr);
            let missing = result1[0];
            let ctrn = result1[1];
            for (let k = ctr; k < paramsN; k++) {
              a[i2][j][k] = missing[k - ctr];
            }
            ctr = ctr + ctrn;
          }
        }
      }
      return a;
    }
    function indcpaRejUniform(buf, bufl, len) {
      let r = new Array(384).fill(0);
      let val0, val1;
      let pos = 0;
      let ctr = 0;
      while (ctr < len && pos + 3 <= bufl) {
        val0 = (uint16(buf[pos] >> 0) | uint16(buf[pos + 1]) << 8) & 4095;
        val1 = (uint16(buf[pos + 1] >> 4) | uint16(buf[pos + 2]) << 4) & 4095;
        pos = pos + 3;
        if (val0 < paramsQ) {
          r[ctr] = val0;
          ctr = ctr + 1;
        }
        if (ctr < len && val1 < paramsQ) {
          r[ctr] = val1;
          ctr = ctr + 1;
        }
      }
      let result = new Array(2);
      result[0] = r;
      result[1] = ctr;
      return result;
    }
    function sample1(seed, nonce) {
      let l = paramsETA1 * paramsN / 4;
      let p = prf(l, seed, nonce);
      return byteopsCbd(p);
    }
    function sample2(seed, nonce) {
      let l = paramsETA2 * paramsN / 4;
      let p = prf(l, seed, nonce);
      return byteopsCbd2(p);
    }
    function prf(l, key, nonce) {
      let nonce_arr = new Array(1);
      nonce_arr[0] = nonce;
      const hash = new SHAKE(256);
      hash.reset();
      const buffer1 = Buffer.from(key);
      const buffer2 = Buffer.from(nonce_arr);
      hash.update(buffer1).update(buffer2);
      let buf = hash.digest({ buffer: Buffer.alloc(l) });
      return buf;
    }
    function byteopsCbd(buf) {
      let t, d;
      let a, b;
      let r = new Array(384).fill(0);
      for (let i2 = 0; i2 < paramsN / 4; i2++) {
        t = byteopsLoad24(buf.slice(3 * i2, buf.length));
        d = t & 2396745;
        d = d + (t >> 1 & 2396745);
        d = d + (t >> 2 & 2396745);
        for (let j = 0; j < 4; j++) {
          a = int16(d >> 6 * j + 0 & 7);
          b = int16(d >> 6 * j + paramsETA1 & 7);
          r[4 * i2 + j] = a - b;
        }
      }
      return r;
    }
    function byteopsCbd2(buf) {
      let t, d;
      let a, b;
      let r = new Array(384).fill(0);
      for (let i2 = 0; i2 < paramsN / 8; i2++) {
        t = byteopsLoad32(buf.slice(4 * i2, buf.length));
        d = t & 1431655765;
        d = d + (t >> 1 & 1431655765);
        for (let j = 0; j < 8; j++) {
          a = int16(d >> 4 * j + 0 & 3);
          b = int16(d >> 4 * j + paramsETA2 & 3);
          r[8 * i2 + j] = a - b;
        }
      }
      return r;
    }
    function byteopsLoad24(x) {
      let r;
      r = uint32(x[0]);
      r = r | uint32(x[1]) << 8;
      r = r | uint32(x[2]) << 16;
      return r;
    }
    function byteopsLoad32(x) {
      let r;
      r = uint32(x[0]);
      r = r | uint32(x[1]) << 8;
      r = r | uint32(x[2]) << 16;
      r = r | uint32(x[3]) << 24;
      return r;
    }
    function ntt(r) {
      let j = 0;
      let k = 1;
      let zeta;
      let t;
      for (let l = 128; l >= 2; l >>= 1) {
        for (let start = 0; start < 256; start = j + l) {
          zeta = nttZetas[k];
          k = k + 1;
          for (j = start; j < start + l; j++) {
            t = nttFqMul(zeta, r[j + l]);
            r[j + l] = r[j] - t;
            r[j] = r[j] + t;
          }
        }
      }
      return r;
    }
    function nttFqMul(a, b) {
      return byteopsMontgomeryReduce(a * b);
    }
    function reduce(r) {
      for (let i2 = 0; i2 < paramsN; i2++) {
        r[i2] = barrett(r[i2]);
      }
      return r;
    }
    function barrett(a) {
      let v = ((1 << 24) + paramsQ / 2) / paramsQ;
      let t = v * a >> 24;
      t = t * paramsQ;
      return a - t;
    }
    function byteopsMontgomeryReduce(a) {
      let u = int16(int32(a) * paramsQinv);
      let t = u * paramsQ;
      t = a - t;
      t >>= 16;
      return int16(t);
    }
    function polyToMont(r) {
      let f = 1353;
      for (let i2 = 0; i2 < paramsN; i2++) {
        r[i2] = byteopsMontgomeryReduce(int32(r[i2]) * int32(f));
      }
      return r;
    }
    function multiply(a, b) {
      let r = polyBaseMulMontgomery(a[0], b[0]);
      let t;
      for (let i2 = 1; i2 < paramsK; i2++) {
        t = polyBaseMulMontgomery(a[i2], b[i2]);
        r = add(r, t);
      }
      return reduce(r);
    }
    function polyBaseMulMontgomery(a, b) {
      let rx, ry;
      for (let i2 = 0; i2 < paramsN / 4; i2++) {
        rx = nttBaseMul(
          a[4 * i2 + 0],
          a[4 * i2 + 1],
          b[4 * i2 + 0],
          b[4 * i2 + 1],
          nttZetas[64 + i2]
        );
        ry = nttBaseMul(
          a[4 * i2 + 2],
          a[4 * i2 + 3],
          b[4 * i2 + 2],
          b[4 * i2 + 3],
          -nttZetas[64 + i2]
        );
        a[4 * i2 + 0] = rx[0];
        a[4 * i2 + 1] = rx[1];
        a[4 * i2 + 2] = ry[0];
        a[4 * i2 + 3] = ry[1];
      }
      return a;
    }
    function nttBaseMul(a0, a1, b0, b1, zeta) {
      let r = new Array(2);
      r[0] = nttFqMul(a1, b1);
      r[0] = nttFqMul(r[0], zeta);
      r[0] = r[0] + nttFqMul(a0, b0);
      r[1] = nttFqMul(a0, b1);
      r[1] = r[1] + nttFqMul(a1, b0);
      return r;
    }
    function add(a, b) {
      let c = new Array(384);
      for (let i2 = 0; i2 < paramsN; i2++) {
        c[i2] = a[i2] + b[i2];
      }
      return c;
    }
    function subtract(a, b) {
      for (let i2 = 0; i2 < paramsN; i2++) {
        a[i2] = a[i2] - b[i2];
      }
      return a;
    }
    function nttInverse(r) {
      let j = 0;
      let k = 0;
      let zeta;
      let t;
      for (let l = 2; l <= 128; l <<= 1) {
        for (let start = 0; start < 256; start = j + l) {
          zeta = nttZetasInv[k];
          k = k + 1;
          for (j = start; j < start + l; j++) {
            t = r[j];
            r[j] = barrett(t + r[j + l]);
            r[j + l] = t - r[j + l];
            r[j + l] = nttFqMul(zeta, r[j + l]);
          }
        }
      }
      for (j = 0; j < 256; j++) {
        r[j] = nttFqMul(r[j], nttZetasInv[127]);
      }
      return r;
    }
    function compress1(u) {
      let rr = 0;
      let r = new Array(640);
      let t = new Array(4);
      for (let i2 = 0; i2 < paramsK; i2++) {
        for (let j = 0; j < paramsN / 4; j++) {
          for (let k = 0; k < 4; k++) {
            t[k] = ((u[i2][4 * j + k] << 10) + paramsQ / 2) / paramsQ & 1023;
          }
          r[rr + 0] = byte(t[0] >> 0);
          r[rr + 1] = byte(t[0] >> 8 | t[1] << 2);
          r[rr + 2] = byte(t[1] >> 6 | t[2] << 4);
          r[rr + 3] = byte(t[2] >> 4 | t[3] << 6);
          r[rr + 4] = byte(t[3] >> 2);
          rr = rr + 5;
        }
      }
      return r;
    }
    function compress2(v) {
      let rr = 0;
      let r = new Array(128);
      let t = new Array(8);
      for (let i2 = 0; i2 < paramsN / 8; i2++) {
        for (let j = 0; j < 8; j++) {
          t[j] = byte(((v[8 * i2 + j] << 4) + paramsQ / 2) / paramsQ) & 15;
        }
        r[rr + 0] = t[0] | t[1] << 4;
        r[rr + 1] = t[2] | t[3] << 4;
        r[rr + 2] = t[4] | t[5] << 4;
        r[rr + 3] = t[6] | t[7] << 4;
        rr = rr + 4;
      }
      return r;
    }
    function decompress1(a) {
      let r = new Array(paramsK);
      for (let i2 = 0; i2 < paramsK; i2++) {
        r[i2] = new Array(384);
      }
      let aa = 0;
      let t = new Array(4);
      for (let i2 = 0; i2 < paramsK; i2++) {
        for (let j = 0; j < paramsN / 4; j++) {
          t[0] = uint16(a[aa + 0]) >> 0 | uint16(a[aa + 1]) << 8;
          t[1] = uint16(a[aa + 1]) >> 2 | uint16(a[aa + 2]) << 6;
          t[2] = uint16(a[aa + 2]) >> 4 | uint16(a[aa + 3]) << 4;
          t[3] = uint16(a[aa + 3]) >> 6 | uint16(a[aa + 4]) << 2;
          aa = aa + 5;
          for (let k = 0; k < 4; k++) {
            r[i2][4 * j + k] = int16(((uint32(t[k] & 1023) >>> 0) * (uint32(paramsQ) >>> 0) >>> 0) + 512 >> 10 >>> 0);
          }
        }
      }
      return r;
    }
    function subtract_q(r) {
      for (let i2 = 0; i2 < paramsN; i2++) {
        r[i2] = r[i2] - paramsQ;
        r[i2] = r[i2] + (r[i2] >> 31 & paramsQ);
      }
      return r;
    }
    function decompress2(a) {
      let r = new Array(384);
      let aa = 0;
      for (let i2 = 0; i2 < paramsN / 2; i2++) {
        r[2 * i2 + 0] = int16(uint16(a[aa] & 15) * uint16(paramsQ) + 8 >> 4);
        r[2 * i2 + 1] = int16(uint16(a[aa] >> 4) * uint16(paramsQ) + 8 >> 4);
        aa = aa + 1;
      }
      return r;
    }
    function byte(n) {
      n = n % 256;
      return n;
    }
    function int16(n) {
      let end = -32768;
      let start = 32767;
      if (n >= end && n <= start) {
        return n;
      }
      if (n < end) {
        n = n + 32769;
        n = n % 65536;
        n = start + n;
        return n;
      }
      if (n > start) {
        n = n - 32768;
        n = n % 65536;
        n = end + n;
        return n;
      }
    }
    function uint16(n) {
      n = n % 65536;
      return n;
    }
    function int32(n) {
      let end = -2147483648;
      let start = 2147483647;
      if (n >= end && n <= start) {
        return n;
      }
      if (n < end) {
        n = n + 2147483649;
        n = n % 4294967296;
        n = start + n;
        return n;
      }
      if (n > start) {
        n = n - 2147483648;
        n = n % 4294967296;
        n = end + n;
        return n;
      }
    }
    function uint32(n) {
      n = n % 4294967296;
      return n;
    }
    function ArrayCompare(a, b) {
      if (a.length != b.length) {
        return 0;
      }
      for (let i2 = 0; i2 < a.length; i2++) {
        if (a[i2] != b[i2]) {
          return 0;
        }
      }
      return 1;
    }
    exports.KeyGen512 = KeyGen512;
    exports.Encrypt512 = Encrypt512;
    exports.Decrypt512 = Decrypt512;
    exports.Test512 = Test512;
  }
});

// kyber768.js
var require_kyber768 = __commonJS({
  "kyber768.js"(exports) {
    var { SHA3, SHAKE } = require_sha3();
    var webcrypto = window.crypto.subtle;
    var nttZetas = [
      2285,
      2571,
      2970,
      1812,
      1493,
      1422,
      287,
      202,
      3158,
      622,
      1577,
      182,
      962,
      2127,
      1855,
      1468,
      573,
      2004,
      264,
      383,
      2500,
      1458,
      1727,
      3199,
      2648,
      1017,
      732,
      608,
      1787,
      411,
      3124,
      1758,
      1223,
      652,
      2777,
      1015,
      2036,
      1491,
      3047,
      1785,
      516,
      3321,
      3009,
      2663,
      1711,
      2167,
      126,
      1469,
      2476,
      3239,
      3058,
      830,
      107,
      1908,
      3082,
      2378,
      2931,
      961,
      1821,
      2604,
      448,
      2264,
      677,
      2054,
      2226,
      430,
      555,
      843,
      2078,
      871,
      1550,
      105,
      422,
      587,
      177,
      3094,
      3038,
      2869,
      1574,
      1653,
      3083,
      778,
      1159,
      3182,
      2552,
      1483,
      2727,
      1119,
      1739,
      644,
      2457,
      349,
      418,
      329,
      3173,
      3254,
      817,
      1097,
      603,
      610,
      1322,
      2044,
      1864,
      384,
      2114,
      3193,
      1218,
      1994,
      2455,
      220,
      2142,
      1670,
      2144,
      1799,
      2051,
      794,
      1819,
      2475,
      2459,
      478,
      3221,
      3021,
      996,
      991,
      958,
      1869,
      1522,
      1628
    ];
    var nttZetasInv = [
      1701,
      1807,
      1460,
      2371,
      2338,
      2333,
      308,
      108,
      2851,
      870,
      854,
      1510,
      2535,
      1278,
      1530,
      1185,
      1659,
      1187,
      3109,
      874,
      1335,
      2111,
      136,
      1215,
      2945,
      1465,
      1285,
      2007,
      2719,
      2726,
      2232,
      2512,
      75,
      156,
      3e3,
      2911,
      2980,
      872,
      2685,
      1590,
      2210,
      602,
      1846,
      777,
      147,
      2170,
      2551,
      246,
      1676,
      1755,
      460,
      291,
      235,
      3152,
      2742,
      2907,
      3224,
      1779,
      2458,
      1251,
      2486,
      2774,
      2899,
      1103,
      1275,
      2652,
      1065,
      2881,
      725,
      1508,
      2368,
      398,
      951,
      247,
      1421,
      3222,
      2499,
      271,
      90,
      853,
      1860,
      3203,
      1162,
      1618,
      666,
      320,
      8,
      2813,
      1544,
      282,
      1838,
      1293,
      2314,
      552,
      2677,
      2106,
      1571,
      205,
      2918,
      1542,
      2721,
      2597,
      2312,
      681,
      130,
      1602,
      1871,
      829,
      2946,
      3065,
      1325,
      2756,
      1861,
      1474,
      1202,
      2367,
      3147,
      1752,
      2707,
      171,
      3127,
      3042,
      1907,
      1836,
      1517,
      359,
      758,
      1441
    ];
    var paramsK = 3;
    var paramsN = 256;
    var paramsQ = 3329;
    var paramsQinv = 62209;
    var paramsETA = 2;
    KeyGen768 = function() {
      let indcpakeys = indcpaKeyGen();
      let pk = indcpakeys[0];
      let sk = indcpakeys[1];
      const buffer1 = Buffer.from(pk);
      const hash1 = new SHA3(256);
      hash1.update(buffer1);
      let pkh = hash1.digest();
      let rnd = new Uint8Array(32);
      webcrypto.getRandomValues(rnd);
      for (let i2 = 0; i2 < pk.length; i2++) {
        sk.push(pk[i2]);
      }
      for (let i2 = 0; i2 < pkh.length; i2++) {
        sk.push(pkh[i2]);
      }
      for (let i2 = 0; i2 < rnd.length; i2++) {
        sk.push(rnd[i2]);
      }
      let keys = new Array(2);
      keys[0] = pk;
      keys[1] = sk;
      return keys;
    };
    Encrypt768 = function(pk) {
      let m = new Uint8Array(32);
      webcrypto.getRandomValues(m);
      const buffer1 = Buffer.from(m);
      const hash1 = new SHA3(256);
      hash1.update(buffer1);
      let mh = hash1.digest();
      const buffer2 = Buffer.from(pk);
      const hash2 = new SHA3(256);
      hash2.update(buffer2);
      let pkh = hash2.digest();
      const buffer3 = Buffer.from(mh);
      const buffer4 = Buffer.from(pkh);
      const hash3 = new SHA3(512);
      hash3.update(buffer3).update(buffer4);
      let kr = new Uint8Array(hash3.digest());
      let kr1 = kr.slice(0, 32);
      let kr2 = kr.slice(32, 64);
      let c = indcpaEncrypt(pk, mh, kr2);
      const buffer5 = Buffer.from(c);
      const hash4 = new SHA3(256);
      hash4.update(buffer5);
      let ch = hash4.digest();
      const buffer6 = Buffer.from(kr1);
      const buffer7 = Buffer.from(ch);
      const hash5 = new SHAKE(256);
      hash5.update(buffer6).update(buffer7);
      let ss = hash5.digest();
      let result = new Array(2);
      result[0] = c;
      result[1] = ss;
      return result;
    };
    Decrypt768 = function(c, privateKey) {
      let sk = privateKey.slice(0, 1152);
      let pk = privateKey.slice(1152, 2336);
      let pkh = privateKey.slice(2336, 2368);
      let z = privateKey.slice(2368, 2400);
      let m = indcpaDecrypt(c, sk);
      const buffer1 = Buffer.from(m);
      const buffer2 = Buffer.from(pkh);
      const hash1 = new SHA3(512);
      hash1.update(buffer1).update(buffer2);
      let kr = new Uint8Array(hash1.digest());
      let kr1 = kr.slice(0, 32);
      let kr2 = kr.slice(32, 64);
      let cmp = indcpaEncrypt(pk, m, kr2);
      let fail = ArrayCompare(c, cmp) - 1;
      const buffer3 = Buffer.from(c);
      const hash2 = new SHA3(256);
      hash2.update(buffer3);
      let ch = hash2.digest();
      let ss = [];
      if (!fail) {
        const buffer4 = Buffer.from(kr1);
        const buffer5 = Buffer.from(ch);
        const hash3 = new SHAKE(256);
        hash3.update(buffer4).update(buffer5);
        ss = hash3.digest();
      } else {
        const buffer6 = Buffer.from(z);
        const buffer7 = Buffer.from(ch);
        const hash4 = new SHAKE(256);
        hash4.update(buffer6).update(buffer7);
        ss = hash4.digest();
      }
      return ss;
    };
    function indcpaKeyGen() {
      let rnd = new Uint8Array(32);
      webcrypto.getRandomValues(rnd);
      const buffer1 = Buffer.from(rnd);
      const hash1 = new SHA3(512);
      hash1.update(buffer1);
      let seed = new Uint8Array(hash1.digest());
      let publicSeed = seed.slice(0, 32);
      let noiseSeed = seed.slice(32, 64);
      let a = generateMatrixA(publicSeed, false, paramsK);
      let s = new Array(paramsK);
      let nonce = 0;
      for (let i2 = 0; i2 < paramsK; i2++) {
        s[i2] = sample(noiseSeed, nonce);
        nonce = nonce + 1;
      }
      let e = new Array(paramsK);
      for (let i2 = 0; i2 < paramsK; i2++) {
        e[i2] = sample(noiseSeed, nonce);
        nonce = nonce + 1;
      }
      for (let i2 = 0; i2 < paramsK; i2++) {
        s[i2] = ntt(s[i2]);
      }
      for (let i2 = 0; i2 < paramsK; i2++) {
        e[i2] = ntt(e[i2]);
      }
      for (let i2 = 0; i2 < paramsK; i2++) {
        s[i2] = reduce(s[i2]);
      }
      let pk = new Array(paramsK);
      for (let i2 = 0; i2 < paramsK; i2++) {
        pk[i2] = polyToMont(multiply(a[i2], s));
      }
      for (let i2 = 0; i2 < paramsK; i2++) {
        pk[i2] = add(pk[i2], e[i2]);
      }
      for (let i2 = 0; i2 < paramsK; i2++) {
        pk[i2] = reduce(pk[i2]);
      }
      let keys = new Array(2);
      keys[0] = [];
      let bytes = [];
      for (let i2 = 0; i2 < paramsK; i2++) {
        bytes = polyToBytes(pk[i2]);
        for (let j = 0; j < bytes.length; j++) {
          keys[0].push(bytes[j]);
        }
      }
      for (let i2 = 0; i2 < publicSeed.length; i2++) {
        keys[0].push(publicSeed[i2]);
      }
      keys[1] = [];
      bytes = [];
      for (let i2 = 0; i2 < paramsK; i2++) {
        bytes = polyToBytes(s[i2]);
        for (let j = 0; j < bytes.length; j++) {
          keys[1].push(bytes[j]);
        }
      }
      return keys;
    }
    function indcpaEncrypt(pk1, msg, coins) {
      let pk = new Array(paramsK);
      let start;
      let end;
      for (let i2 = 0; i2 < paramsK; i2++) {
        start = i2 * 384;
        end = (i2 + 1) * 384;
        pk[i2] = polyFromBytes(pk1.slice(start, end));
      }
      let seed = pk1.slice(1152, 1184);
      let at = generateMatrixA(seed, true);
      let r = new Array(paramsK);
      let nonce = 0;
      for (let i2 = 0; i2 < paramsK; i2++) {
        r[i2] = sample(coins, nonce);
        nonce = nonce + 1;
      }
      let e1 = new Array(paramsK);
      for (let i2 = 0; i2 < paramsK; i2++) {
        e1[i2] = sample(coins, nonce);
        nonce = nonce + 1;
      }
      let e2 = sample(coins, nonce);
      for (let i2 = 0; i2 < paramsK; i2++) {
        r[i2] = ntt(r[i2]);
      }
      for (let i2 = 0; i2 < paramsK; i2++) {
        r[i2] = reduce(r[i2]);
      }
      let u = new Array(paramsK);
      for (i = 0; i < paramsK; i++) {
        u[i] = multiply(at[i], r);
      }
      for (let i2 = 0; i2 < paramsK; i2++) {
        u[i2] = nttInverse(u[i2]);
      }
      for (let i2 = 0; i2 < paramsK; i2++) {
        u[i2] = add(u[i2], e1[i2]);
      }
      let m = polyFromMsg(msg);
      let v = multiply(pk, r);
      v = nttInverse(v);
      v = add(v, e2);
      v = add(v, m);
      for (let i2 = 0; i2 < paramsK; i2++) {
        u[i2] = reduce(u[i2]);
      }
      v = reduce(v);
      let c1 = compress1(u);
      let c2 = compress2(v);
      return c1.concat(c2);
    }
    function indcpaDecrypt(c, privateKey) {
      let u = decompress1(c.slice(0, 960));
      let v = decompress2(c.slice(960, 1088));
      let privateKeyPolyvec = polyvecFromBytes(privateKey);
      for (let i2 = 0; i2 < paramsK; i2++) {
        u[i2] = ntt(u[i2]);
      }
      let mp = multiply(privateKeyPolyvec, u);
      mp = nttInverse(mp);
      mp = subtract(v, mp);
      mp = reduce(mp);
      return polyToMsg(mp);
    }
    function polyvecFromBytes(a) {
      let r = new Array(paramsK);
      for (let i2 = 0; i2 < paramsK; i2++) {
        r[i2] = new Array(384);
      }
      let start;
      let end;
      for (let i2 = 0; i2 < paramsK; i2++) {
        start = i2 * 384;
        end = (i2 + 1) * 384;
        r[i2] = polyFromBytes(a.slice(start, end));
      }
      return r;
    }
    function polyToBytes(a) {
      let t0, t1;
      let r = new Array(384);
      let a2 = subtract_q(a);
      for (let i2 = 0; i2 < paramsN / 2; i2++) {
        t0 = uint16(a2[2 * i2]);
        t1 = uint16(a2[2 * i2 + 1]);
        r[3 * i2 + 0] = byte(t0 >> 0);
        r[3 * i2 + 1] = byte(t0 >> 8) | byte(t1 << 4);
        r[3 * i2 + 2] = byte(t1 >> 4);
      }
      return r;
    }
    function polyFromBytes(a) {
      let r = new Array(384).fill(0);
      for (let i2 = 0; i2 < paramsN / 2; i2++) {
        r[2 * i2] = int16((uint16(a[3 * i2 + 0]) >> 0 | uint16(a[3 * i2 + 1]) << 8) & 4095);
        r[2 * i2 + 1] = int16((uint16(a[3 * i2 + 1]) >> 4 | uint16(a[3 * i2 + 2]) << 4) & 4095);
      }
      return r;
    }
    function polyToMsg(a) {
      let msg = new Array(32);
      let t;
      let a2 = subtract_q(a);
      for (let i2 = 0; i2 < paramsN / 8; i2++) {
        msg[i2] = 0;
        for (let j = 0; j < 8; j++) {
          t = ((uint16(a2[8 * i2 + j]) << 1) + uint16(paramsQ / 2)) / uint16(paramsQ) & 1;
          msg[i2] |= byte(t << j);
        }
      }
      return msg;
    }
    function polyFromMsg(msg) {
      let r = new Array(384).fill(0);
      let mask;
      for (let i2 = 0; i2 < paramsN / 8; i2++) {
        for (let j = 0; j < 8; j++) {
          mask = -1 * int16(msg[i2] >> j & 1);
          r[8 * i2 + j] = mask & int16((paramsQ + 1) / 2);
        }
      }
      return r;
    }
    function generateMatrixA(seed, transposed) {
      let a = new Array(3);
      let output = new Array(3 * 168);
      const xof = new SHAKE(128);
      let ctr = 0;
      for (let i2 = 0; i2 < paramsK; i2++) {
        a[i2] = new Array(paramsK);
        let transpose = new Array(2);
        for (let j = 0; j < paramsK; j++) {
          transpose[0] = j;
          transpose[1] = i2;
          if (transposed) {
            transpose[0] = i2;
            transpose[1] = j;
          }
          xof.reset();
          const buffer1 = Buffer.from(seed);
          const buffer2 = Buffer.from(transpose);
          xof.update(buffer1).update(buffer2);
          let output2 = new Uint8Array(xof.digest({ buffer: Buffer.alloc(672) }));
          let outputlen = 3 * 168;
          let result = new Array(2);
          result = indcpaRejUniform(output2.slice(0, 504), outputlen, paramsN);
          a[i2][j] = result[0];
          ctr = result[1];
          while (ctr < paramsN) {
            let outputn = output2.slice(504, 672);
            let result1 = new Array(2);
            result1 = indcpaRejUniform(outputn, 168, paramsN - ctr);
            let missing = result1[0];
            let ctrn = result1[1];
            for (let k = ctr; k < paramsN; k++) {
              a[i2][j][k] = missing[k - ctr];
            }
            ctr = ctr + ctrn;
          }
        }
      }
      return a;
    }
    function indcpaRejUniform(buf, bufl, len) {
      let r = new Array(384).fill(0);
      let val0, val1;
      let pos = 0;
      let ctr = 0;
      while (ctr < len && pos + 3 <= bufl) {
        val0 = (uint16(buf[pos] >> 0) | uint16(buf[pos + 1]) << 8) & 4095;
        val1 = (uint16(buf[pos + 1] >> 4) | uint16(buf[pos + 2]) << 4) & 4095;
        pos = pos + 3;
        if (val0 < paramsQ) {
          r[ctr] = val0;
          ctr = ctr + 1;
        }
        if (ctr < len && val1 < paramsQ) {
          r[ctr] = val1;
          ctr = ctr + 1;
        }
      }
      let result = new Array(2);
      result[0] = r;
      result[1] = ctr;
      return result;
    }
    function sample(seed, nonce) {
      let l = paramsETA * paramsN / 4;
      let p = prf(l, seed, nonce);
      return byteopsCbd(p);
    }
    function prf(l, key, nonce) {
      let nonce_arr = new Array(1);
      nonce_arr[0] = nonce;
      const hash = new SHAKE(256);
      hash.reset();
      const buffer1 = Buffer.from(key);
      const buffer2 = Buffer.from(nonce_arr);
      hash.update(buffer1).update(buffer2);
      let buf = hash.digest({ buffer: Buffer.alloc(l) });
      return buf;
    }
    function byteopsCbd(buf) {
      let t, d;
      let a, b;
      let r = new Array(384).fill(0);
      for (let i2 = 0; i2 < paramsN / 8; i2++) {
        t = byteopsLoad32(buf.slice(4 * i2, buf.length)) >>> 0;
        d = (t & 1431655765) >>> 0;
        d = d + ((t >> 1 >>> 0 & 1431655765) >>> 0) >>> 0;
        for (let j = 0; j < 8; j++) {
          a = int16((d >> 4 * j + 0 >>> 0 & 3) >>> 0);
          b = int16((d >> 4 * j + paramsETA >>> 0 & 3) >>> 0);
          r[8 * i2 + j] = a - b;
        }
      }
      return r;
    }
    function byteopsLoad32(x) {
      let r;
      r = uint32(x[0]);
      r = (r | uint32(x[1]) << 8) >>> 0 >>> 0;
      r = (r | uint32(x[2]) << 16) >>> 0 >>> 0;
      r = (r | uint32(x[3]) << 24) >>> 0 >>> 0;
      return uint32(r);
    }
    function ntt(r) {
      let j = 0;
      let k = 1;
      let zeta;
      let t;
      for (let l = 128; l >= 2; l >>= 1) {
        for (let start = 0; start < 256; start = j + l) {
          zeta = nttZetas[k];
          k = k + 1;
          for (j = start; j < start + l; j++) {
            t = nttFqMul(zeta, r[j + l]);
            r[j + l] = r[j] - t;
            r[j] = r[j] + t;
          }
        }
      }
      return r;
    }
    function nttFqMul(a, b) {
      return byteopsMontgomeryReduce(a * b);
    }
    function reduce(r) {
      for (let i2 = 0; i2 < paramsN; i2++) {
        r[i2] = barrett(r[i2]);
      }
      return r;
    }
    function barrett(a) {
      let v = ((1 << 24) + paramsQ / 2) / paramsQ;
      let t = v * a >> 24;
      t = t * paramsQ;
      return a - t;
    }
    function byteopsMontgomeryReduce(a) {
      let u = int16(int32(a) * paramsQinv);
      let t = u * paramsQ;
      t = a - t;
      t >>= 16;
      return int16(t);
    }
    function polyToMont(r) {
      let f = 1353;
      for (let i2 = 0; i2 < paramsN; i2++) {
        r[i2] = byteopsMontgomeryReduce(int32(r[i2]) * int32(f));
      }
      return r;
    }
    function multiply(a, b) {
      let r = polyBaseMulMontgomery(a[0], b[0]);
      let t;
      for (let i2 = 1; i2 < paramsK; i2++) {
        t = polyBaseMulMontgomery(a[i2], b[i2]);
        r = add(r, t);
      }
      return reduce(r);
    }
    function polyBaseMulMontgomery(a, b) {
      let rx, ry;
      for (let i2 = 0; i2 < paramsN / 4; i2++) {
        rx = nttBaseMul(
          a[4 * i2 + 0],
          a[4 * i2 + 1],
          b[4 * i2 + 0],
          b[4 * i2 + 1],
          nttZetas[64 + i2]
        );
        ry = nttBaseMul(
          a[4 * i2 + 2],
          a[4 * i2 + 3],
          b[4 * i2 + 2],
          b[4 * i2 + 3],
          -nttZetas[64 + i2]
        );
        a[4 * i2 + 0] = rx[0];
        a[4 * i2 + 1] = rx[1];
        a[4 * i2 + 2] = ry[0];
        a[4 * i2 + 3] = ry[1];
      }
      return a;
    }
    function nttBaseMul(a0, a1, b0, b1, zeta) {
      let r = new Array(2);
      r[0] = nttFqMul(a1, b1);
      r[0] = nttFqMul(r[0], zeta);
      r[0] = r[0] + nttFqMul(a0, b0);
      r[1] = nttFqMul(a0, b1);
      r[1] = r[1] + nttFqMul(a1, b0);
      return r;
    }
    function add(a, b) {
      let c = new Array(384);
      for (let i2 = 0; i2 < paramsN; i2++) {
        c[i2] = a[i2] + b[i2];
      }
      return c;
    }
    function subtract(a, b) {
      for (let i2 = 0; i2 < paramsN; i2++) {
        a[i2] = a[i2] - b[i2];
      }
      return a;
    }
    function nttInverse(r) {
      let j = 0;
      let k = 0;
      let zeta;
      let t;
      for (let l = 2; l <= 128; l <<= 1) {
        for (let start = 0; start < 256; start = j + l) {
          zeta = nttZetasInv[k];
          k = k + 1;
          for (j = start; j < start + l; j++) {
            t = r[j];
            r[j] = barrett(t + r[j + l]);
            r[j + l] = t - r[j + l];
            r[j + l] = nttFqMul(zeta, r[j + l]);
          }
        }
      }
      for (j = 0; j < 256; j++) {
        r[j] = nttFqMul(r[j], nttZetasInv[127]);
      }
      return r;
    }
    function compress1(u) {
      let rr = 0;
      let r = new Array(960);
      let t = new Array(4);
      for (let i2 = 0; i2 < paramsK; i2++) {
        for (let j = 0; j < paramsN / 4; j++) {
          for (let k = 0; k < 4; k++) {
            t[k] = ((u[i2][4 * j + k] << 10) + paramsQ / 2) / paramsQ & 1023;
          }
          r[rr + 0] = byte(t[0] >> 0);
          r[rr + 1] = byte(t[0] >> 8 | t[1] << 2);
          r[rr + 2] = byte(t[1] >> 6 | t[2] << 4);
          r[rr + 3] = byte(t[2] >> 4 | t[3] << 6);
          r[rr + 4] = byte(t[3] >> 2);
          rr = rr + 5;
        }
      }
      return r;
    }
    function compress2(v) {
      let rr = 0;
      let r = new Array(128);
      let t = new Array(8);
      for (let i2 = 0; i2 < paramsN / 8; i2++) {
        for (let j = 0; j < 8; j++) {
          t[j] = byte(((v[8 * i2 + j] << 4) + paramsQ / 2) / paramsQ) & 15;
        }
        r[rr + 0] = t[0] | t[1] << 4;
        r[rr + 1] = t[2] | t[3] << 4;
        r[rr + 2] = t[4] | t[5] << 4;
        r[rr + 3] = t[6] | t[7] << 4;
        rr = rr + 4;
      }
      return r;
    }
    function decompress1(a) {
      let r = new Array(paramsK);
      for (let i2 = 0; i2 < paramsK; i2++) {
        r[i2] = new Array(384);
      }
      let aa = 0;
      let t = new Array(4);
      for (let i2 = 0; i2 < paramsK; i2++) {
        for (let j = 0; j < paramsN / 4; j++) {
          t[0] = uint16(a[aa + 0]) >> 0 | uint16(a[aa + 1]) << 8;
          t[1] = uint16(a[aa + 1]) >> 2 | uint16(a[aa + 2]) << 6;
          t[2] = uint16(a[aa + 2]) >> 4 | uint16(a[aa + 3]) << 4;
          t[3] = uint16(a[aa + 3]) >> 6 | uint16(a[aa + 4]) << 2;
          aa = aa + 5;
          for (let k = 0; k < 4; k++) {
            r[i2][4 * j + k] = int16(((uint32(t[k] & 1023) >>> 0) * (uint32(paramsQ) >>> 0) >>> 0) + 512 >> 10 >>> 0);
          }
        }
      }
      return r;
    }
    function subtract_q(r) {
      for (let i2 = 0; i2 < paramsN; i2++) {
        r[i2] = r[i2] - paramsQ;
        r[i2] = r[i2] + (r[i2] >> 31 & paramsQ);
      }
      return r;
    }
    function decompress2(a) {
      let r = new Array(384);
      let aa = 0;
      for (let i2 = 0; i2 < paramsN / 2; i2++) {
        r[2 * i2 + 0] = int16(uint16(a[aa] & 15) * uint16(paramsQ) + 8 >> 4);
        r[2 * i2 + 1] = int16(uint16(a[aa] >> 4) * uint16(paramsQ) + 8 >> 4);
        aa = aa + 1;
      }
      return r;
    }
    function byte(n) {
      n = n % 256;
      return n;
    }
    function int16(n) {
      let end = -32768;
      let start = 32767;
      if (n >= end && n <= start) {
        return n;
      }
      if (n < end) {
        n = n + 32769;
        n = n % 65536;
        n = start + n;
        return n;
      }
      if (n > start) {
        n = n - 32768;
        n = n % 65536;
        n = end + n;
        return n;
      }
    }
    function uint16(n) {
      n = n % 65536;
      return n;
    }
    function int32(n) {
      let end = -2147483648;
      let start = 2147483647;
      if (n >= end && n <= start) {
        return n;
      }
      if (n < end) {
        n = n + 2147483649;
        n = n % 4294967296;
        n = start + n;
        return n;
      }
      if (n > start) {
        n = n - 2147483648;
        n = n % 4294967296;
        n = end + n;
        return n;
      }
    }
    function uint32(n) {
      n = n % 4294967296;
      return n;
    }
    function ArrayCompare(a, b) {
      if (a.length != b.length) {
        return 0;
      }
      for (let i2 = 0; i2 < a.length; i2++) {
        if (a[i2] != b[i2]) {
          return 0;
        }
      }
      return 1;
    }
    exports.KeyGen768 = KeyGen768;
    exports.Encrypt768 = Encrypt768;
    exports.Decrypt768 = Decrypt768;
    exports.Test768 = Test768;
  }
});

// kyber1024.js
var require_kyber1024 = __commonJS({
  "kyber1024.js"(exports) {
    var { SHA3, SHAKE } = require_sha3();
    var webcrypto = window.crypto.subtle;
    var nttZetas = [
      2285,
      2571,
      2970,
      1812,
      1493,
      1422,
      287,
      202,
      3158,
      622,
      1577,
      182,
      962,
      2127,
      1855,
      1468,
      573,
      2004,
      264,
      383,
      2500,
      1458,
      1727,
      3199,
      2648,
      1017,
      732,
      608,
      1787,
      411,
      3124,
      1758,
      1223,
      652,
      2777,
      1015,
      2036,
      1491,
      3047,
      1785,
      516,
      3321,
      3009,
      2663,
      1711,
      2167,
      126,
      1469,
      2476,
      3239,
      3058,
      830,
      107,
      1908,
      3082,
      2378,
      2931,
      961,
      1821,
      2604,
      448,
      2264,
      677,
      2054,
      2226,
      430,
      555,
      843,
      2078,
      871,
      1550,
      105,
      422,
      587,
      177,
      3094,
      3038,
      2869,
      1574,
      1653,
      3083,
      778,
      1159,
      3182,
      2552,
      1483,
      2727,
      1119,
      1739,
      644,
      2457,
      349,
      418,
      329,
      3173,
      3254,
      817,
      1097,
      603,
      610,
      1322,
      2044,
      1864,
      384,
      2114,
      3193,
      1218,
      1994,
      2455,
      220,
      2142,
      1670,
      2144,
      1799,
      2051,
      794,
      1819,
      2475,
      2459,
      478,
      3221,
      3021,
      996,
      991,
      958,
      1869,
      1522,
      1628
    ];
    var nttZetasInv = [
      1701,
      1807,
      1460,
      2371,
      2338,
      2333,
      308,
      108,
      2851,
      870,
      854,
      1510,
      2535,
      1278,
      1530,
      1185,
      1659,
      1187,
      3109,
      874,
      1335,
      2111,
      136,
      1215,
      2945,
      1465,
      1285,
      2007,
      2719,
      2726,
      2232,
      2512,
      75,
      156,
      3e3,
      2911,
      2980,
      872,
      2685,
      1590,
      2210,
      602,
      1846,
      777,
      147,
      2170,
      2551,
      246,
      1676,
      1755,
      460,
      291,
      235,
      3152,
      2742,
      2907,
      3224,
      1779,
      2458,
      1251,
      2486,
      2774,
      2899,
      1103,
      1275,
      2652,
      1065,
      2881,
      725,
      1508,
      2368,
      398,
      951,
      247,
      1421,
      3222,
      2499,
      271,
      90,
      853,
      1860,
      3203,
      1162,
      1618,
      666,
      320,
      8,
      2813,
      1544,
      282,
      1838,
      1293,
      2314,
      552,
      2677,
      2106,
      1571,
      205,
      2918,
      1542,
      2721,
      2597,
      2312,
      681,
      130,
      1602,
      1871,
      829,
      2946,
      3065,
      1325,
      2756,
      1861,
      1474,
      1202,
      2367,
      3147,
      1752,
      2707,
      171,
      3127,
      3042,
      1907,
      1836,
      1517,
      359,
      758,
      1441
    ];
    var paramsK = 4;
    var paramsN = 256;
    var paramsQ = 3329;
    var paramsQinv = 62209;
    var paramsETA = 2;
    KeyGen1024 = function() {
      let indcpakeys = indcpaKeyGen();
      let pk = indcpakeys[0];
      let sk = indcpakeys[1];
      const buffer1 = Buffer.from(pk);
      const hash1 = new SHA3(256);
      hash1.update(buffer1);
      let pkh = hash1.digest();
      let rnd = new Uint8Array(32);
      webcrypto.getRandomValues(rnd);
      for (let i2 = 0; i2 < pk.length; i2++) {
        sk.push(pk[i2]);
      }
      for (let i2 = 0; i2 < pkh.length; i2++) {
        sk.push(pkh[i2]);
      }
      for (let i2 = 0; i2 < rnd.length; i2++) {
        sk.push(rnd[i2]);
      }
      let keys = new Array(2);
      keys[0] = pk;
      keys[1] = sk;
      return keys;
    };
    Encrypt1024 = function(pk) {
      let m = new Uint8Array(32);
      webcrypto.getRandomValues(m);
      const buffer1 = Buffer.from(m);
      const hash1 = new SHA3(256);
      hash1.update(buffer1);
      let mh = hash1.digest();
      const buffer2 = Buffer.from(pk);
      const hash2 = new SHA3(256);
      hash2.update(buffer2);
      let pkh = hash2.digest();
      const buffer3 = Buffer.from(mh);
      const buffer4 = Buffer.from(pkh);
      const hash3 = new SHA3(512);
      hash3.update(buffer3).update(buffer4);
      let kr = new Uint8Array(hash3.digest());
      let kr1 = kr.slice(0, 32);
      let kr2 = kr.slice(32, 64);
      let c = indcpaEncrypt(pk, mh, kr2);
      const buffer5 = Buffer.from(c);
      const hash4 = new SHA3(256);
      hash4.update(buffer5);
      let ch = hash4.digest();
      const buffer6 = Buffer.from(kr1);
      const buffer7 = Buffer.from(ch);
      const hash5 = new SHAKE(256);
      hash5.update(buffer6).update(buffer7);
      let ss = hash5.digest();
      let result = new Array(2);
      result[0] = c;
      result[1] = ss;
      return result;
    };
    Decrypt1024 = function(c, privateKey) {
      let sk = privateKey.slice(0, 1536);
      let pk = privateKey.slice(1536, 3104);
      let pkh = privateKey.slice(3104, 3136);
      let z = privateKey.slice(3136, 3168);
      let m = indcpaDecrypt(c, sk);
      const buffer1 = Buffer.from(m);
      const buffer2 = Buffer.from(pkh);
      const hash1 = new SHA3(512);
      hash1.update(buffer1).update(buffer2);
      let kr = new Uint8Array(hash1.digest());
      let kr1 = kr.slice(0, 32);
      let kr2 = kr.slice(32, 64);
      let cmp = indcpaEncrypt(pk, m, kr2);
      let fail = ArrayCompare(c, cmp) - 1;
      const buffer3 = Buffer.from(c);
      const hash2 = new SHA3(256);
      hash2.update(buffer3);
      let ch = hash2.digest();
      let ss = [];
      if (!fail) {
        const buffer4 = Buffer.from(kr1);
        const buffer5 = Buffer.from(ch);
        const hash3 = new SHAKE(256);
        hash3.update(buffer4).update(buffer5);
        ss = hash3.digest();
      } else {
        const buffer6 = Buffer.from(z);
        const buffer7 = Buffer.from(ch);
        const hash4 = new SHAKE(256);
        hash4.update(buffer6).update(buffer7);
        ss = hash4.digest();
      }
      return ss;
    };
    function indcpaKeyGen() {
      let rnd = new Uint8Array(32);
      webcrypto.getRandomValues(rnd);
      const buffer1 = Buffer.from(rnd);
      const hash1 = new SHA3(512);
      hash1.update(buffer1);
      let seed = new Uint8Array(hash1.digest());
      let publicSeed = seed.slice(0, 32);
      let noiseSeed = seed.slice(32, 64);
      let a = generateMatrixA(publicSeed, false, paramsK);
      let s = new Array(paramsK);
      let nonce = 0;
      for (let i2 = 0; i2 < paramsK; i2++) {
        s[i2] = sample(noiseSeed, nonce);
        nonce = nonce + 1;
      }
      let e = new Array(paramsK);
      for (let i2 = 0; i2 < paramsK; i2++) {
        e[i2] = sample(noiseSeed, nonce);
        nonce = nonce + 1;
      }
      for (let i2 = 0; i2 < paramsK; i2++) {
        s[i2] = ntt(s[i2]);
      }
      for (let i2 = 0; i2 < paramsK; i2++) {
        e[i2] = ntt(e[i2]);
      }
      for (let i2 = 0; i2 < paramsK; i2++) {
        s[i2] = reduce(s[i2]);
      }
      let pk = new Array(paramsK);
      for (let i2 = 0; i2 < paramsK; i2++) {
        pk[i2] = polyToMont(multiply(a[i2], s));
      }
      for (let i2 = 0; i2 < paramsK; i2++) {
        pk[i2] = add(pk[i2], e[i2]);
      }
      for (let i2 = 0; i2 < paramsK; i2++) {
        pk[i2] = reduce(pk[i2]);
      }
      let keys = new Array(2);
      keys[0] = [];
      let bytes = [];
      for (let i2 = 0; i2 < paramsK; i2++) {
        bytes = polyToBytes(pk[i2]);
        for (let j = 0; j < bytes.length; j++) {
          keys[0].push(bytes[j]);
        }
      }
      for (let i2 = 0; i2 < publicSeed.length; i2++) {
        keys[0].push(publicSeed[i2]);
      }
      keys[1] = [];
      bytes = [];
      for (let i2 = 0; i2 < paramsK; i2++) {
        bytes = polyToBytes(s[i2]);
        for (let j = 0; j < bytes.length; j++) {
          keys[1].push(bytes[j]);
        }
      }
      return keys;
    }
    function indcpaEncrypt(pk1, msg, coins) {
      let pk = new Array(paramsK);
      let start;
      let end;
      for (let i2 = 0; i2 < paramsK; i2++) {
        start = i2 * 384;
        end = (i2 + 1) * 384;
        pk[i2] = polyFromBytes(pk1.slice(start, end));
      }
      let seed = pk1.slice(1536, 1568);
      let at = generateMatrixA(seed, true);
      let r = new Array(paramsK);
      let nonce = 0;
      for (let i2 = 0; i2 < paramsK; i2++) {
        r[i2] = sample(coins, nonce);
        nonce = nonce + 1;
      }
      let e1 = new Array(paramsK);
      for (let i2 = 0; i2 < paramsK; i2++) {
        e1[i2] = sample(coins, nonce);
        nonce = nonce + 1;
      }
      let e2 = sample(coins, nonce);
      for (let i2 = 0; i2 < paramsK; i2++) {
        r[i2] = ntt(r[i2]);
      }
      for (let i2 = 0; i2 < paramsK; i2++) {
        r[i2] = reduce(r[i2]);
      }
      let u = new Array(paramsK);
      for (i = 0; i < paramsK; i++) {
        u[i] = multiply(at[i], r);
      }
      for (let i2 = 0; i2 < paramsK; i2++) {
        u[i2] = nttInverse(u[i2]);
      }
      for (let i2 = 0; i2 < paramsK; i2++) {
        u[i2] = add(u[i2], e1[i2]);
      }
      let m = polyFromMsg(msg);
      let v = multiply(pk, r);
      v = nttInverse(v);
      v = add(v, e2);
      v = add(v, m);
      for (let i2 = 0; i2 < paramsK; i2++) {
        u[i2] = reduce(u[i2]);
      }
      v = reduce(v);
      let c1 = compress1(u);
      let c2 = compress2(v);
      return c1.concat(c2);
    }
    function indcpaDecrypt(c, privateKey) {
      let u = decompress1(c.slice(0, 1408));
      let v = decompress2(c.slice(1408, 1568));
      let privateKeyPolyvec = polyvecFromBytes(privateKey);
      for (let i2 = 0; i2 < paramsK; i2++) {
        u[i2] = ntt(u[i2]);
      }
      let mp = multiply(privateKeyPolyvec, u);
      mp = nttInverse(mp);
      mp = subtract(v, mp);
      mp = reduce(mp);
      return polyToMsg(mp);
    }
    function polyvecFromBytes(a) {
      let r = new Array(paramsK);
      for (let i2 = 0; i2 < paramsK; i2++) {
        r[i2] = new Array(384);
      }
      let start;
      let end;
      for (let i2 = 0; i2 < paramsK; i2++) {
        start = i2 * 384;
        end = (i2 + 1) * 384;
        r[i2] = polyFromBytes(a.slice(start, end));
      }
      return r;
    }
    function polyToBytes(a) {
      let t0, t1;
      let r = new Array(384);
      let a2 = subtract_q(a);
      for (let i2 = 0; i2 < paramsN / 2; i2++) {
        t0 = uint16(a2[2 * i2]);
        t1 = uint16(a2[2 * i2 + 1]);
        r[3 * i2 + 0] = byte(t0 >> 0);
        r[3 * i2 + 1] = byte(t0 >> 8) | byte(t1 << 4);
        r[3 * i2 + 2] = byte(t1 >> 4);
      }
      return r;
    }
    function polyFromBytes(a) {
      let r = new Array(384).fill(0);
      for (let i2 = 0; i2 < paramsN / 2; i2++) {
        r[2 * i2] = int16((uint16(a[3 * i2 + 0]) >> 0 | uint16(a[3 * i2 + 1]) << 8) & 4095);
        r[2 * i2 + 1] = int16((uint16(a[3 * i2 + 1]) >> 4 | uint16(a[3 * i2 + 2]) << 4) & 4095);
      }
      return r;
    }
    function polyToMsg(a) {
      let msg = new Array(32);
      let t;
      let a2 = subtract_q(a);
      for (let i2 = 0; i2 < paramsN / 8; i2++) {
        msg[i2] = 0;
        for (let j = 0; j < 8; j++) {
          t = ((uint16(a2[8 * i2 + j]) << 1) + uint16(paramsQ / 2)) / uint16(paramsQ) & 1;
          msg[i2] |= byte(t << j);
        }
      }
      return msg;
    }
    function polyFromMsg(msg) {
      let r = new Array(384).fill(0);
      let mask;
      for (let i2 = 0; i2 < paramsN / 8; i2++) {
        for (let j = 0; j < 8; j++) {
          mask = -1 * int16(msg[i2] >> j & 1);
          r[8 * i2 + j] = mask & int16((paramsQ + 1) / 2);
        }
      }
      return r;
    }
    function generateMatrixA(seed, transposed) {
      let a = new Array(paramsK);
      let output = new Array(3 * 168);
      const xof = new SHAKE(128);
      let ctr = 0;
      for (let i2 = 0; i2 < paramsK; i2++) {
        a[i2] = new Array(paramsK);
        let transpose = new Array(2);
        for (let j = 0; j < paramsK; j++) {
          transpose[0] = j;
          transpose[1] = i2;
          if (transposed) {
            transpose[0] = i2;
            transpose[1] = j;
          }
          xof.reset();
          const buffer1 = Buffer.from(seed);
          const buffer2 = Buffer.from(transpose);
          xof.update(buffer1).update(buffer2);
          let output2 = new Uint8Array(xof.digest({ buffer: Buffer.alloc(672) }));
          let outputlen = 3 * 168;
          let result = new Array(2);
          result = indcpaRejUniform(output2.slice(0, 504), outputlen, paramsN);
          a[i2][j] = result[0];
          ctr = result[1];
          while (ctr < paramsN) {
            let outputn = output2.slice(504, 672);
            let result1 = new Array(2);
            result1 = indcpaRejUniform(outputn, 168, paramsN - ctr);
            let missing = result1[0];
            let ctrn = result1[1];
            for (let k = ctr; k < paramsN; k++) {
              a[i2][j][k] = missing[k - ctr];
            }
            ctr = ctr + ctrn;
          }
        }
      }
      return a;
    }
    function indcpaRejUniform(buf, bufl, len) {
      let r = new Array(384).fill(0);
      let val0, val1;
      let pos = 0;
      let ctr = 0;
      while (ctr < len && pos + 3 <= bufl) {
        val0 = (uint16(buf[pos] >> 0) | uint16(buf[pos + 1]) << 8) & 4095;
        val1 = (uint16(buf[pos + 1] >> 4) | uint16(buf[pos + 2]) << 4) & 4095;
        pos = pos + 3;
        if (val0 < paramsQ) {
          r[ctr] = val0;
          ctr = ctr + 1;
        }
        if (ctr < len && val1 < paramsQ) {
          r[ctr] = val1;
          ctr = ctr + 1;
        }
      }
      let result = new Array(2);
      result[0] = r;
      result[1] = ctr;
      return result;
    }
    function sample(seed, nonce) {
      let l = paramsETA * paramsN / 4;
      let p = prf(l, seed, nonce);
      return byteopsCbd(p);
    }
    function prf(l, key, nonce) {
      let nonce_arr = new Array(1);
      nonce_arr[0] = nonce;
      const hash = new SHAKE(256);
      hash.reset();
      const buffer1 = Buffer.from(key);
      const buffer2 = Buffer.from(nonce_arr);
      hash.update(buffer1).update(buffer2);
      let buf = hash.digest({ buffer: Buffer.alloc(l) });
      return buf;
    }
    function byteopsCbd(buf) {
      let t, d;
      let a, b;
      let r = new Array(384).fill(0);
      for (let i2 = 0; i2 < paramsN / 8; i2++) {
        t = byteopsLoad32(buf.slice(4 * i2, buf.length)) >>> 0;
        d = (t & 1431655765) >>> 0;
        d = d + ((t >> 1 >>> 0 & 1431655765) >>> 0) >>> 0;
        for (let j = 0; j < 8; j++) {
          a = int16((d >> 4 * j + 0 >>> 0 & 3) >>> 0);
          b = int16((d >> 4 * j + paramsETA >>> 0 & 3) >>> 0);
          r[8 * i2 + j] = a - b;
        }
      }
      return r;
    }
    function byteopsLoad32(x) {
      let r;
      r = uint32(x[0]);
      r = (r | uint32(x[1]) << 8) >>> 0 >>> 0;
      r = (r | uint32(x[2]) << 16) >>> 0 >>> 0;
      r = (r | uint32(x[3]) << 24) >>> 0 >>> 0;
      return uint32(r);
    }
    function ntt(r) {
      let j = 0;
      let k = 1;
      let zeta;
      let t;
      for (let l = 128; l >= 2; l >>= 1) {
        for (let start = 0; start < 256; start = j + l) {
          zeta = nttZetas[k];
          k = k + 1;
          for (j = start; j < start + l; j++) {
            t = nttFqMul(zeta, r[j + l]);
            r[j + l] = r[j] - t;
            r[j] = r[j] + t;
          }
        }
      }
      return r;
    }
    function nttFqMul(a, b) {
      return byteopsMontgomeryReduce(a * b);
    }
    function reduce(r) {
      for (let i2 = 0; i2 < paramsN; i2++) {
        r[i2] = barrett(r[i2]);
      }
      return r;
    }
    function barrett(a) {
      let v = ((1 << 24) + paramsQ / 2) / paramsQ;
      let t = v * a >> 24;
      t = t * paramsQ;
      return a - t;
    }
    function byteopsMontgomeryReduce(a) {
      let u = int16(int32(a) * paramsQinv);
      let t = u * paramsQ;
      t = a - t;
      t >>= 16;
      return int16(t);
    }
    function polyToMont(r) {
      let f = 1353;
      for (let i2 = 0; i2 < paramsN; i2++) {
        r[i2] = byteopsMontgomeryReduce(int32(r[i2]) * int32(f));
      }
      return r;
    }
    function multiply(a, b) {
      let r = polyBaseMulMontgomery(a[0], b[0]);
      let t;
      for (let i2 = 1; i2 < paramsK; i2++) {
        t = polyBaseMulMontgomery(a[i2], b[i2]);
        r = add(r, t);
      }
      return reduce(r);
    }
    function polyBaseMulMontgomery(a, b) {
      let rx, ry;
      for (let i2 = 0; i2 < paramsN / 4; i2++) {
        rx = nttBaseMul(
          a[4 * i2 + 0],
          a[4 * i2 + 1],
          b[4 * i2 + 0],
          b[4 * i2 + 1],
          nttZetas[64 + i2]
        );
        ry = nttBaseMul(
          a[4 * i2 + 2],
          a[4 * i2 + 3],
          b[4 * i2 + 2],
          b[4 * i2 + 3],
          -nttZetas[64 + i2]
        );
        a[4 * i2 + 0] = rx[0];
        a[4 * i2 + 1] = rx[1];
        a[4 * i2 + 2] = ry[0];
        a[4 * i2 + 3] = ry[1];
      }
      return a;
    }
    function nttBaseMul(a0, a1, b0, b1, zeta) {
      let r = new Array(2);
      r[0] = nttFqMul(a1, b1);
      r[0] = nttFqMul(r[0], zeta);
      r[0] = r[0] + nttFqMul(a0, b0);
      r[1] = nttFqMul(a0, b1);
      r[1] = r[1] + nttFqMul(a1, b0);
      return r;
    }
    function add(a, b) {
      let c = new Array(384);
      for (let i2 = 0; i2 < paramsN; i2++) {
        c[i2] = a[i2] + b[i2];
      }
      return c;
    }
    function subtract(a, b) {
      for (let i2 = 0; i2 < paramsN; i2++) {
        a[i2] = a[i2] - b[i2];
      }
      return a;
    }
    function nttInverse(r) {
      let j = 0;
      let k = 0;
      let zeta;
      let t;
      for (let l = 2; l <= 128; l <<= 1) {
        for (let start = 0; start < 256; start = j + l) {
          zeta = nttZetasInv[k];
          k = k + 1;
          for (j = start; j < start + l; j++) {
            t = r[j];
            r[j] = barrett(t + r[j + l]);
            r[j + l] = t - r[j + l];
            r[j + l] = nttFqMul(zeta, r[j + l]);
          }
        }
      }
      for (j = 0; j < 256; j++) {
        r[j] = nttFqMul(r[j], nttZetasInv[127]);
      }
      return r;
    }
    function compress1(u) {
      let rr = 0;
      let r = new Array(1408);
      let t = new Array(8);
      for (let i2 = 0; i2 < paramsK; i2++) {
        for (let j = 0; j < paramsN / 8; j++) {
          for (let k = 0; k < 8; k++) {
            t[k] = uint16(((uint32(u[i2][8 * j + k]) << 11 >>> 0) + uint32(paramsQ / 2)) / uint32(paramsQ) & 2047 >>> 0);
          }
          r[rr + 0] = byte(t[0] >> 0);
          r[rr + 1] = byte(t[0] >> 8 | t[1] << 3);
          r[rr + 2] = byte(t[1] >> 5 | t[2] << 6);
          r[rr + 3] = byte(t[2] >> 2);
          r[rr + 4] = byte(t[2] >> 10 | t[3] << 1);
          r[rr + 5] = byte(t[3] >> 7 | t[4] << 4);
          r[rr + 6] = byte(t[4] >> 4 | t[5] << 7);
          r[rr + 7] = byte(t[5] >> 1);
          r[rr + 8] = byte(t[5] >> 9 | t[6] << 2);
          r[rr + 9] = byte(t[6] >> 6 | t[7] << 5);
          r[rr + 10] = byte(t[7] >> 3);
          rr = rr + 11;
        }
      }
      return r;
    }
    function compress2(v) {
      let rr = 0;
      let r = new Array(160);
      let t = new Array(8);
      for (let i2 = 0; i2 < paramsN / 8; i2++) {
        for (let j = 0; j < 8; j++) {
          t[j] = byte(((uint32(v[8 * i2 + j]) << 5 >>> 0) + uint32(paramsQ / 2)) / uint32(paramsQ)) & 31;
        }
        r[rr + 0] = byte(t[0] >> 0 | t[1] << 5);
        r[rr + 1] = byte(t[1] >> 3 | t[2] << 2 | t[3] << 7);
        r[rr + 2] = byte(t[3] >> 1 | t[4] << 4);
        r[rr + 3] = byte(t[4] >> 4 | t[5] << 1 | t[6] << 6);
        r[rr + 4] = byte(t[6] >> 2 | t[7] << 3);
        rr = rr + 5;
      }
      return r;
    }
    function decompress1(a) {
      let r = new Array(paramsK);
      for (let i2 = 0; i2 < paramsK; i2++) {
        r[i2] = new Array(384);
      }
      let aa = 0;
      let t = new Array(8);
      for (let i2 = 0; i2 < paramsK; i2++) {
        for (let j = 0; j < paramsN / 8; j++) {
          t[0] = uint16(a[aa + 0]) >> 0 | uint16(a[aa + 1]) << 8;
          t[1] = uint16(a[aa + 1]) >> 3 | uint16(a[aa + 2]) << 5;
          t[2] = uint16(a[aa + 2]) >> 6 | uint16(a[aa + 3]) << 2 | uint16(a[aa + 4]) << 10;
          t[3] = uint16(a[aa + 4]) >> 1 | uint16(a[aa + 5]) << 7;
          t[4] = uint16(a[aa + 5]) >> 4 | uint16(a[aa + 6]) << 4;
          t[5] = uint16(a[aa + 6]) >> 7 | uint16(a[aa + 7]) << 1 | uint16(a[aa + 8]) << 9;
          t[6] = uint16(a[aa + 8]) >> 2 | uint16(a[aa + 9]) << 6;
          t[7] = uint16(a[aa + 9]) >> 5 | uint16(a[aa + 10]) << 3;
          aa = aa + 11;
          for (let k = 0; k < 8; k++) {
            r[i2][8 * j + k] = uint32(t[k] & 2047) * paramsQ + 1024 >> 11;
          }
        }
      }
      return r;
    }
    function subtract_q(r) {
      for (let i2 = 0; i2 < paramsN; i2++) {
        r[i2] = r[i2] - paramsQ;
        r[i2] = r[i2] + (r[i2] >> 31 & paramsQ);
      }
      return r;
    }
    function decompress2(a) {
      let r = new Array(384);
      let t = new Array(8);
      let aa = 0;
      for (let i2 = 0; i2 < paramsN / 8; i2++) {
        t[0] = a[aa + 0] >> 0;
        t[1] = a[aa + 0] >> 5 | a[aa + 1] << 3;
        t[2] = a[aa + 1] >> 2;
        t[3] = a[aa + 1] >> 7 | a[aa + 2] << 1;
        t[4] = a[aa + 2] >> 4 | a[aa + 3] << 4;
        t[5] = a[aa + 3] >> 1;
        t[6] = a[aa + 3] >> 6 | a[aa + 4] << 2;
        t[7] = a[aa + 4] >> 3;
        aa = aa + 5;
        for (let j = 0; j < 8; j++) {
          r[8 * i2 + j] = int16(uint32(t[j] & 31 >>> 0) * uint32(paramsQ) + 16 >> 5);
        }
      }
      return r;
    }
    function byte(n) {
      n = n % 256;
      return n;
    }
    function int16(n) {
      let end = -32768;
      let start = 32767;
      if (n >= end && n <= start) {
        return n;
      }
      if (n < end) {
        n = n + 32769;
        n = n % 65536;
        n = start + n;
        return n;
      }
      if (n > start) {
        n = n - 32768;
        n = n % 65536;
        n = end + n;
        return n;
      }
    }
    function uint16(n) {
      n = n % 65536;
      return n;
    }
    function int32(n) {
      let end = -2147483648;
      let start = 2147483647;
      if (n >= end && n <= start) {
        return n;
      }
      if (n < end) {
        n = n + 2147483649;
        n = n % 4294967296;
        n = start + n;
        return n;
      }
      if (n > start) {
        n = n - 2147483648;
        n = n % 4294967296;
        n = end + n;
        return n;
      }
    }
    function uint32(n) {
      n = n % 4294967296;
      return n;
    }
    function ArrayCompare(a, b) {
      if (a.length != b.length) {
        return 0;
      }
      for (let i2 = 0; i2 < a.length; i2++) {
        if (a[i2] != b[i2]) {
          return 0;
        }
      }
      return 1;
    }
    exports.KeyGen1024 = KeyGen1024;
    exports.Encrypt1024 = Encrypt1024;
    exports.Decrypt1024 = Decrypt1024;
    exports.Test1024 = Test1024;
  }
});

// index.js
var require_index = __commonJS({
  "index.js"(exports, module) {
    module.exports = { ...require_kyber512(), ...require_kyber768(), ...require_kyber1024() };
  }
});
export default require_index();
/*! Bundled license information:

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)
*/
